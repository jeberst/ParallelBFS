<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NodeXLNetworkServer</name>
    </assembly>
    <members>
        <member name="T:Smrf.NodeXL.NetworkServer.Program">
            <summary>
            The application's entry point.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.Program.UsageMessage">
            Program usage message.
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.Program.Main(System.String[])">
             <summary>
             The main entry point for the application.
             </summary>
            
             <param name="args">
             Command line arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.Program.RunProgram(System.String[])">
             <summary>
             Runs the program.
             </summary>
            
             <param name="args">
             Command line arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.Program.ParseCommandLine(System.String[],System.String@)">
             <summary>
             Parses the command line arguments.
             </summary>
            
             <param name="args">
             Command line arguments.
             </param>
            
             <param name="sNetworkConfigurationFilePath">
             Where the full path of the specified network configuration file gets
             stored.
             </param>
            
             <remarks>
             If an error is encountered, this method handles it and then exits the
             program.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.Program.GetTwitterSearchNetwork(System.DateTime,System.String,Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser,System.Xml.XmlDocument@,System.String@)">
             <summary>
             Gets a Twitter search network directly from Twitter.
             </summary>
            
             <param name="oStartTime">
             Time at which the network download started.
             </param>
            
             <param name="sNetworkConfigurationFilePath">
             Full path to the network configuration file.
             </param>
            
             <param name="oNetworkConfigurationFileParser">
             Parses a network configuration file.
             </param>
            
             <param name="oXmlDocument">
             Where the XML document containing the network as GraphML gets stored.
             </param>
            
             <param name="sNetworkFileFolderPath">
             Where the full path to the folder where the network files should be
             written gets stored.
             </param>
            
             <remarks>
             If an error is encountered, this method handles it and then exits the
             program.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.Program.GetGraphServerTwitterSearchNetwork(System.DateTime,System.String,Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser,System.Xml.XmlDocument@,System.String@)">
             <summary>
             Gets a Twitter search network from the Graph Server.
             </summary>
            
             <param name="oStartTime">
             Time at which the network download started.
             </param>
            
             <param name="sNetworkConfigurationFilePath">
             Full path to the network configuration file.
             </param>
            
             <param name="oNetworkConfigurationFileParser">
             Parses a network configuration file.
             </param>
            
             <param name="oXmlDocument">
             Where the XML document containing the network as GraphML gets stored.
             </param>
            
             <param name="sNetworkFileFolderPath">
             Where the full path to the folder where the network files should be
             written gets stored.
             </param>
            
             <remarks>
             If an error is encountered, this method handles it and then exits the
             program.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.Program.GetMaximumStatusDateUtc(System.DateTime,System.Int32)">
             <summary>
             Gets the maximum status date.
             </summary>
            
             <param name="oStartTime">
             Time at which the network download started.
             </param>
            
             <param name="iStartDateInDaysBeforeToday">
             The tweet start date, specified as the number of days before today.
             If today is June 10, for example, and you set this to 7, then the
             returned date will be June 3.  Must be greater than or equal to zero.
             </param>
            
             <returns>
             The maximum status date, in UTC.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.Program.SubscribeToProgressChangedEvent(Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase)">
             <summary>
             Subscribes to the ProgressChanged event on a network analyzer.
             </summary>
            
             <param name="oHttpNetworkAnalyzerBase">
             The network analyzer used to get the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.Program.SaveNetworkToGraphML(System.DateTime,System.Xml.XmlDocument,System.String,System.String)">
             <summary>
             Saves a network to a GraphML file.
             </summary>
            
             <param name="oStartTime">
             Time at which the network download started.
             </param>
            
             <param name="oXmlDocument">
             The XML document containing the network as GraphML.
             </param>
            
             <param name="sNetworkConfigurationFilePath">
             The path of the specified network configuration file.
             </param>
            
             <param name="sNetworkFileFolderPath">
             The full path to the folder where the network files should be written.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.Program.OnNetworkConfigurationFileException(System.Xml.XmlException)">
             <summary>
             Handles an exception thrown while parsing the network configuration
             file.
             </summary>
            
             <param name="oXmlException">
             The exception that was thrown.
             </param>
            
             <remarks>
             The NetworkConfigurationFileParser wraps all parsing errors in
             XmlExceptions.
            
             <para>
             This method exits the program.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.Program.OnGetNetworkException(System.DateTime,System.Exception,System.String,System.String,Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase)">
             <summary>
             Handles an exception thrown while getting a network.
             </summary>
            
             <param name="oStartTime">
             Time at which the network download started.
             </param>
            
             <param name="oException">
             The exception that was thrown.
             </param>
            
             <param name="sNetworkConfigurationFilePath">
             Full path to the network configuration file.
             </param>
            
             <param name="sNetworkFileFolderPath">
             The full path to the folder where the network files should be written.
             </param>
            
             <param name="oHttpNetworkAnalyzerBase">
             The network analyzer used to get the network.
             </param>
            
             <returns>
             If the exception is a <see cref="T:Smrf.NodeXL.GraphDataProviders.PartialNetworkException"/>, an
             XmlDocument describing the partial network is returned.  Otherwise,
             the program exits.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.Program.OnGetNetworkPartialNetworkException(System.DateTime,Smrf.NodeXL.GraphDataProviders.PartialNetworkException,System.String,System.String,Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase)">
             <summary>
             Handles a PartialNetworkException thrown while getting a network.
             </summary>
            
             <param name="oStartTime">
             Time at which the network download started.
             </param>
            
             <param name="oPartialNetworkException">
             The exception that was thrown.
             </param>
            
             <param name="sNetworkConfigurationFilePath">
             The path of the specified network configuration file.
             </param>
            
             <param name="sNetworkFileFolderPath">
             The full path to the folder where the network files should be written.
             </param>
            
             <param name="oHttpNetworkAnalyzerBase">
             The network analyzer used to get the network.
             </param>
            
             <returns>
             The partial network, as GraphML.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.Program.OnGetNetworkOtherException(System.DateTime,System.Exception,System.String,System.String,Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase)">
             <summary>
             Handles an exception (other than a PartialNetworkException) thrown
             while getting a network.
             </summary>
            
             <param name="oStartTime">
             Time at which the network download started.
             </param>
            
             <param name="oException">
             The exception that was thrown.
             </param>
            
             <param name="sNetworkConfigurationFilePath">
             The path of the specified network configuration file.
             </param>
            
             <param name="sNetworkFileFolderPath">
             The full path to the folder where the network files should be written.
             </param>
            
             <param name="oHttpNetworkAnalyzerBase">
             The network analyzer used to get the network.
             </param>
            
             <remarks>
             This method exits the program.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.Program.HttpNetworkAnalyzer_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
             <summary>
             Handles the ProgressChanged event on the HttpNetworkAnalyzer objects.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.Program.Exit(Smrf.NodeXL.NetworkServer.ExitCode,System.String)">
             <summary>
             Exits the program with a specified exit code.
             </summary>
            
             <param name="eExitCode">
             The program exit code to use.
             </param>
            
             <param name="sErrorMessage">
             The error message to send to the standard error stream, or null for no
             message..
             </param>
        </member>
        <member name="T:Smrf.NodeXL.NetworkServer.ExitCode">
            <summary>
            Specifies the program's exit codes.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.ExitCode.Success">
            <summary>
            The network was successfully obtained.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.ExitCode.UnexpectedException">
            <summary>
            An unexpected exception occurred.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.ExitCode.InvalidCommandLineArguments">
            <summary>
            The command line arguments were invalid.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.ExitCode.InvalidNetworkConfigurationFile">
            <summary>
            The network configuration file was invalid.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.ExitCode.CouldNotGetNetwork">
            <summary>
            An unrecoverable error prevented the network from being obtained.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.ExitCode.CouldNotFindNodeXLTemplate">
            <summary>
            The NodeXL Excel template file could not be found.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.ExitCode.CouldNotOpenExcel">
            <summary>
            Excel could not be opened.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.ExitCode.CouldNotCreateNodeXLWorkbook">
            <summary>
            A NodeXL workbook could not be created from the NodeXL template.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.ExitCode.CouldNotImportGraphIntoNodeXLWorkbook">
            <summary>
            A NodeXL workbook was created but the network graph could not be
            imported into it.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.ExitCode.SaveNetworkFileError">
            <summary>
            An error occcurred while saving the network file.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.ExitCode.CouldNotAutomateNodeXLWorkbook">
            <summary>
            An error occcurred while opening a NodeXL workbook to automate it.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.ExitCode.CouldNotReadWorkbookSettingsFile">
            <summary>
            The workbook settings file specified for the NodeXL workbook couldn't
            be read.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.NetworkServer.FileUtil">
             <summary>
             Utility methods for working with files.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.FileUtil.GetOutputFilePath(System.DateTime,System.String,System.String,System.String,System.String)">
             <summary>
             Gets the full path to an output file.
             </summary>
            
             <param name="startTime">
             Time at which the network download started.
             </param>
            
             <param name="networkConfigurationFilePath">
             Full path to the network configuration file.  Sample:
             "C:\NetworkConfigurations\NetworkConfiguration.xml".
             </param>
            
             <param name="networkFileFolderPath">
             The full path to the folder where the network files should be written.
             Sample "C:\".
             </param>
            
             <param name="fileNamePrefix">
             The prefix to use, or String.Empty for no prefix.  Sample: "Error_".
             </param>
            
             <param name="extension">
             The extension to use, without a period.  Sample: "txt".
             </param>
            
             <returns>
             The full path to an output file.  Sample:
            
             <para>
             C:\Error_NetworkConfiguration_2010-06-01_02-00-00.txt
             </para>
            
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.FileUtil.GetNetworkFileName(System.DateTime,System.String)">
             <summary>
             Gets the name of the file where the network should be written, without
             a path or extension.
             </summary>
            
             <param name="oStartTime">
             Time at which the network download started.
             </param>
            
             <param name="sNetworkConfigurationFilePath">
             Full path to the network configuration file.  Sample:
             "C:\NetworkConfigurations\NetworkConfiguration.xml".
             </param>
            
             <returns>
             The name of the file where the network should be written, without a
             path or extension.  Sample:
            
             <para>
             NetworkConfiguration_2010-06-01_02-00-00
             </para>
            
             </returns>
        </member>
        <member name="T:Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser">
             <summary>
             Parses a network configuration file.
             </summary>
            
             <remarks>
             A network configuration file specifies which network to get and where to
             save it on disk.  It's in XML format.
            
             <para>
             Call <see cref="M:Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser.OpenNetworkConfigurationFile(System.String)"/> to open the file.  Call
             <see cref="M:Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser.GetNetworkType"/> to get the type of network, then call 
             the method that corresponds to that network type to get the configuration
             details.
             </para>
            
             <para>
             All of the methods throw an XmlException when they detect invalid
             configuration information.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser.OpenNetworkConfigurationFile(System.String)">
             <summary>
             Opens the network configuration file.
             </summary>
            
             <param name="filePath">
             Full path to the network configuration file.
             </param>
            
             <remarks>
             This method must be called before any other methods are called.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser.GetNetworkType">
             <summary>
             Gets the type of network to get.
             </summary>
            
             <returns>
             The type of network to get, as a <see cref="T:Smrf.NodeXL.NetworkServer.NetworkType"/>.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser.GetTwitterSearchNetworkConfiguration(System.String@,Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude@,System.Int32@,System.String@)">
             <summary>
             Gets the configuration details for a Twitter search network obtained
             directly from Twitter.
             </summary>
            
             <param name="searchTerm">
             Where the term to search for gets stored.
             </param>
            
             <param name="whatToInclude">
             Where the specification for what should be included in the network gets
             stored.
             </param>
            
             <param name="maximumStatuses">
             Where the maximum number of statuses to request gets stored.
             </param>
            
             <param name="networkFileFolderPath">
             Where the full path to the folder where the network files should be
             written gets stored.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser.GetGraphServerTwitterSearchNetworkConfiguration(System.String@,System.Int32@,System.Int32@,System.Boolean@,System.String@,System.String@,System.String@)">
             <summary>
             Gets the configuration details for a Twitter search network obtained
             from the Graph Server.
             </summary>
            
             <param name="searchTerm">
             Where the term to search for gets stored.
             </param>
            
             <param name="startDateInDaysBeforeToday">
             Where the tweet start date gets stored.  It's specified as the number
             of days before today.  If today is June 10, for example, and you set
             this to 7, then the start date will be June 3.  Must be greater than or
             equal to zero.
             </param>
            
             <param name="maximumStatusesGoingBackward">
             Where the maximum number of statuses to request gets stored.  These go
             backward in time.
             </param>
            
             <param name="expandStatusUrls">
             Where the "expand status URLs" flag gets stored.
             </param>
            
             <param name="graphServerUserName">
             Where the Graph Server user name gets stored.
             </param>
            
             <param name="graphServerPassword">
             Where the Graph Server password gets stored.
             </param>
            
             <param name="networkFileFolderPath">
             Where the full path to the folder where the network files should be
             written gets stored.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser.GetCommonConfiguration(System.Xml.XmlNode,System.String@)">
             <summary>
             Gets the configuration details common to all networks.
             </summary>
            
             <param name="oParentNode">
             Node containing the common configuration details.
             </param>
            
             <param name="sNetworkFileFolderPath">
             Where the full path to the folder where the network files should be
             written gets stored.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser.GetRequiredEnumValue``1(System.Xml.XmlNode,System.String,System.String[],System.String,System.String)">
             <summary>
             Gets a required Enum value from the text of a specified node.
             </summary>
            
             <param name="oNode">
             Node to select from.
             </param>
            
             <param name="sXPath">
             XPath expression.
             </param>
            
             <param name="asEnumValuesToIgnore">
             One or more values to remove from the Enum string before converting it
             to the Enum value, or null to not remove any values.  This is used for
             backward compatibility in the situation where an Enum used to have a
             value that it no longer has.
             </param>
            
             <param name="sValueToUseIfEmpty">
             The Enum value to use if the text of the specified node is empty after
             asEnumValuesToIgnore are removed.  Sample: "None".
             </param>
            
             <param name="sTagName">
             Name of the tag containing the Enum value.  Used in error messages.
             </param>
            
             <returns>
             The specified Enum value.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser.RemoveEnumValues(System.String,System.String[])">
             <summary>
             Removes specified values from Enum text.
             </summary>
            
             <param name="sEnumAsString">
             An Enum value as a string.  Sample:
             "ExpandedStatusUrls, Statuses, FollowedEdges".
             </param>
            
             <param name="asEnumValuesToIgnore">
             One or more values to remove from the Enum string before converting it
             to the Enum value.  Sample: "Statuses".
             </param>
            
             <returns>
             The Enum value as a string, without the ignored values.  Sample:
             "ExpandedStatusUrls,FollowedEdges".
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.NetworkConfigurationFileParser.m_oNetworkConfigurationXmlDocument">
            The opened network configuration file, or null if
            OpenNetworkConfigurationFile() hasn't been called.
        </member>
        <member name="T:Smrf.NodeXL.NetworkServer.NetworkType">
            <summary>
            Specifies the type of network to get.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.NetworkType.TwitterSearch">
            <summary>
            Twitter search network, obtained directly from Twitter.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.NetworkServer.NetworkType.GraphServerTwitterSearch">
            <summary>
            Twitter search network, obtained from the Graph Server.
            </summary>
        </member>
    </members>
</doc>
