<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Smrf.NodeXL.GraphDataProviders</name>
    </assembly>
    <members>
        <member name="T:Smrf.XmlLib.GraphMLXmlDocument">
             <summary>
             Represents an XML document containing GraphML that represents a graph.
             </summary>
            
             <remarks>
             See the "GraphML Primer" for details on the GraphML XML schema:
            
             <para>
             http://graphml.graphdrawing.org/primer/graphml-primer.html
             </para>
            
             <para>
             Creating a <see cref="T:Smrf.XmlLib.GraphMLXmlDocument"/> automatically creates an XML
             declaration, a root "graphml" XML node, and a "graph" child XML node.  Use
             <see cref="M:Smrf.XmlLib.GraphMLXmlDocument.DefineGraphMLAttribute(System.Boolean,System.String,System.String,System.String,System.String)"/>, <see cref="M:Smrf.XmlLib.GraphMLXmlDocument.AppendVertexXmlNode(System.String)"/>,
             <see cref="M:Smrf.XmlLib.GraphMLXmlDocument.AppendEdgeXmlNode(System.String,System.String)"/>, and <see cref="M:Smrf.XmlLib.GraphMLXmlDocument.AppendGraphMLAttributeValue(System.Xml.XmlNode,System.String,System.String)"/> to populate
             the document with vertices, edges, and vertex/edge attributes.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.XmlLib.GraphMLXmlDocument.GraphMLNamespaceUri">
            GraphML namespace URI.
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.#ctor(System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.XmlLib.GraphMLXmlDocument"/>
             class.
             </summary>
            
             <param name="directed">
             true if the graph is directed, false if it is undirected.
             </param>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.DefineGraphMLAttribute(System.Boolean,System.String,System.String,System.String,System.String)">
             <summary>
             Defines a GraphML-Attribute.
             </summary>
            
             <param name="forEdge">
             true if the attribute is for edges, false if it is for vertices.
             </param>
             
             <param name="attributeID">
             The attribute's ID.
             </param>
             
             <param name="attributeName">
             The attribute's name
             </param>
             
             <param name="attributeType">
             The attribute's type  Must be "boolean," "int," "long," "float,"
             "double," or "string."
             </param>
             
             <param name="defaultAttributeValue">
             Default attribute value, or null there is no default.
             </param>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.DefineEdgeStringGraphMLAttributes(System.String[])">
             <summary>
             Defines one or more GraphML-Attributes of type "string" for edges.
             </summary>
            
             <param name="attributeIDNamePairs">
             Array of zero or more pairs of strings.  The first string in the pair
             is an attribute ID and the second is the corresponding attribute name.
             </param>
             
             <remarks>
             THe GraphML-Attributes cannot have default attribute values.
             </remarks>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.DefineVertexStringGraphMLAttributes(System.String[])">
             <summary>
             Defines one or more GraphML-Attributes of type "string" for vertices.
             </summary>
            
             <param name="attributeIDNamePairs">
             Array of zero or more pairs of strings.  The first string in the pair
             is an attribute ID and the second is the corresponding attribute name.
             </param>
             
             <remarks>
             THe GraphML-Attributes cannot have default attribute values.
             </remarks>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.DefineStringGraphMLAttributes(System.Boolean,System.String[])">
             <summary>
             Defines one or more GraphML-Attributes of type "string" for edges or
             vertices.
             </summary>
            
             <param name="forEdges">
             true if the attributes are for edges, false if they are for vertices.
             </param>
            
             <param name="attributeIDNamePairs">
             Array of zero or more pairs of strings.  The first string in the pair
             is an attribute ID and the second is the corresponding attribute name.
             </param>
             
             <remarks>
             THe GraphML-Attributes cannot have default attribute values.
             </remarks>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.DefineGraphMLAttributes(System.Boolean,System.String,System.String[])">
             <summary>
             Defines one or more GraphML-Attributes for edges or vertices.
             </summary>
            
             <param name="forEdges">
             true if the attributes are for edges, false if they are for vertices.
             </param>
            
             <param name="attributeType">
             The attribute's type  Must be "boolean," "int," "long," "float,"
             "double," or "string."
             </param>
            
             <param name="attributeIDNamePairs">
             Array of zero or more pairs of strings.  The first string in the pair
             is an attribute ID and the second is the corresponding attribute name.
             </param>
             
             <remarks>
             THe GraphML-Attributes cannot have default attribute values.
             </remarks>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.AppendVertexXmlNode(System.String)">
             <summary>
             Creates a new XML node representing a vertex and appends it to the
             "graph" XML node.
             </summary>
            
             <param name="vertexID">
             Vertex ID.
             </param>
            
             <returns>
             The new node.
             </returns>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.AppendEdgeXmlNode(System.String,System.String)">
             <summary>
             Creates a new XML node representing an edge and appends it to the
             "graph" XML node.
             </summary>
            
             <param name="vertex1ID">
             ID of the edge's first vertex.
             </param>
            
             <param name="vertex2ID">
             ID of the edge's second vertex.
             </param>
            
             <returns>
             The new node.
             </returns>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.AppendGraphMLAttributeValue(System.Xml.XmlNode,System.String,System.String)">
             <overloads>
             Appends a GraphML-Attribute value to an edge or vertex XML node. 
             </overloads>
            
             <summary>
             Appends a GraphML-Attribute value of type "string" to an edge or vertex
             XML node. 
             </summary>
            
             <param name="edgeOrVertexXmlNode">
             The edge or vertex XML node to add the attribute value to.
             </param>
             
             <param name="attributeID">
             The attribute's ID.
             </param>
             
             <param name="attributeValue">
             The attribute's value.  Can be an empty string but not null.
             </param>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.AppendGraphMLAttributeValue(System.Xml.XmlNode,System.String,System.Int32)">
             <summary>
             Appends a GraphML-Attribute value of type "int" to an edge or vertex
             XML node. 
             </summary>
            
             <param name="edgeOrVertexXmlNode">
             The edge or vertex XML node to add the attribute value to.
             </param>
             
             <param name="attributeID">
             The attribute's ID.
             </param>
             
             <param name="attributeValue">
             The attribute's value.
             </param>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.AppendGraphMLAttributeValue(System.Xml.XmlNode,System.String,System.Double)">
             <summary>
             Appends a GraphML-Attribute value of type "double" to an edge or vertex
             XML node. 
             </summary>
            
             <param name="edgeOrVertexXmlNode">
             The edge or vertex XML node to add the attribute value to.
             </param>
             
             <param name="attributeID">
             The attribute's ID.
             </param>
             
             <param name="attributeValue">
             The attribute's value.
             </param>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.GetHasVertexXmlNode(System.Xml.XmlDocument)">
             <summary>
             Gets a flag indicating whether a document has at least one XML node
             that represents a vertex.
             </summary>
            
             <param name="graphMLXmlDocument">
             XML document containing GraphML that represents a graph.  This does not
             have to be a GraphMLXmlDocument.
             </param>
            
             <returns>
             true if the document has at least one XML node that represents a
             vertex, false if there are no such XML nodes.
             </returns>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.AppendXmlNode(System.Xml.XmlNode,System.String)">
             <overloads>
             Creates a new XML node and appends it to a parent node.
             </overloads>
            
             <summary>
             Creates a new XML node and appends it to a parent node.
             </summary>
            
             <param name="oParentXmlNode">
             Node to append the new node to.
             </param>
             
             <param name="sChildName">
             Name of the new node.
             </param>
            
             <returns>
             The new node.
             </returns>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.AppendXmlNode(System.Xml.XmlNode,System.String,System.String)">
             <summary>
             Creates a new XML node, appends it to a parent node, and sets its inner
             text.
             </summary>
            
             <param name="oParentXmlNode">
             Node to append the new node to.
             </param>
             
             <param name="sChildName">
             Name of the new node.
             </param>
            
             <param name="sInnerText">
             The new node's inner text.  Can be empty but not null.
             </param>
            
             <returns>
             The new node.
             </returns>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.SetXmlNodeAttributes(System.Xml.XmlNode,System.String[])">
             <summary>
             Sets multiple attributes on an XML node.
             </summary>
            
             <param name="oXmlNode">
             Node to set attributes on.
             </param>
            
             <param name="asNameValuePairs">
             One or more pairs of strings.  The first string in each pair is an
             attribute name and the second is the attribute value.
             </param>
            
             <remarks>
             This sets multiple attributes on an XML node in one call.  It's an
             alternative to calling <see cref="M:System.Xml.XmlElement.SetAttribute(System.String,System.String)"/> repeatedly.
             </remarks>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.CreateXmlNamespaceManager(System.String)">
             <overloads>
             Creates an XmlNamespaceManager object to use with the document.
             </overloads>
            
             <summary>
             Creates an XmlNamespaceManager object to use with this document.
             </summary>
            
             <param name="prefix">
             The prefix to use for the default GraphML namespace.
             </param>
            
             <returns>
             An XmlNamespaceManager object to use with the document.
             </returns>
            
             <remarks>
             Any prefix will do, so long as it is also included in every XPath
             expression when the document is searched.  For example, if you want all
             "node" XML nodes in the document, this would work:
            
             <code>
             XmlNamespaceManager oXmlNamespaceManager =
                 oGraphMLXmlDocument.CreateXmlNamespaceManager("g");
            
             foreach ( XmlNode oVertexXmlNode in oGraphMLXmlDocument.SelectNodes(
                 "g:graphml/g:graph/g:node", oXmlNamespaceManager) )
             {
             ...
             }
             </code>
            
             </remarks>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.CreateXmlNamespaceManager(System.Xml.XmlDocument,System.String)">
             <summary>
             Creates an XmlNamespaceManager object to use with a specified document.
             </summary>
            
             <param name="graphMLXmlDocument">
             XML document containing GraphML that represents a graph.  This does not
             have to be a GraphMLXmlDocument.
             </param>
            
             <param name="prefix">
             The prefix to use for the default GraphML namespace.
             </param>
            
             <returns>
             An XmlNamespaceManager object to use with the document.
             </returns>
            
             <remarks>
             See the other overload for details on using this method.
             </remarks>
        </member>
        <member name="M:Smrf.XmlLib.GraphMLXmlDocument.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.XmlLib.GraphMLXmlDocument.m_oGraphMLXmlNode">
            Root GraphML XML node.
        </member>
        <member name="F:Smrf.XmlLib.GraphMLXmlDocument.m_oGraphXmlNode">
            Graph XML node.
        </member>
        <member name="F:Smrf.XmlLib.GraphMLXmlDocument.m_iVertexXmlNodes">
            The number of XML nodes that represent a vertex.
        </member>
        <member name="P:Smrf.XmlLib.GraphMLXmlDocument.GraphXmlNode">
             <summary>
             Gets the "graph" XML node.
             </summary>
            
             <value>
             The XML node for the "graph" GraphML element.
             </value>
        </member>
        <member name="P:Smrf.XmlLib.GraphMLXmlDocument.HasVertexXmlNode">
             <summary>
             Gets a flag indicating whether the document has at least one XML node
             that represents a vertex.
             </summary>
            
             <value>
             true if the document has at least one XML node that represents a
             vertex, false if there are no such XML nodes.
             </value>
        </member>
        <member name="P:Smrf.XmlLib.GraphMLXmlDocument.VertexXmlNodes">
             <summary>
             Gets the number of XML nodes that represent a vertex.
             </summary>
            
             <value>
             The number of XML nodes that represent a vertex.
             </value>
        </member>
        <member name="T:Smrf.AppLib.InvalidJsonException">
            <summary>
            Represents an exception thrown when invalid JSON is detected.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.InvalidJsonException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.AppLib.InvalidJsonException"/>
             class.
             </summary>
            
             <param name="message">
             The exception message.
             </param>
        </member>
        <member name="M:Smrf.AppLib.InvalidJsonException.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphMLLib.NodeXLGraphMLUtil">
            <summary>
            Utility methods for creating GraphML XML documents for use with the NodeXL
            Excel Template.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.NodeXLGraphMLUtil.EdgeRelationshipID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.NodeXLGraphMLUtil.VertexImageFileID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.NodeXLGraphMLUtil.VertexLabelID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.NodeXLGraphMLUtil.VertexMenuTextID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.NodeXLGraphMLUtil.VertexMenuActionID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.NodeXLGraphMLUtil.ImportedIDID">
             This is a special GraphML-attribute that specifies the unique imported
             ID for an imported edge or vertex.  It is used by the Excel Template to
             skip over multiple rows that represent the same edge or vertex.
            
             For example, the Twitter search network can create multiple edges for
             the same tweet.  It sets the ImportedIDID GraphML-attribute on the
             edges to a tweet ID, so the Excel Template can determine which edges
             represent the same tweet.
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.NodeXLGraphMLUtil.DefineEdgeRelationshipGraphMLAttribute(Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Defines a GraphML-Attribute for edge relationships.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.NodeXLGraphMLUtil.DefineVertexImageFileGraphMLAttribute(Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Defines a GraphML-Attribute for vertex image files.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.NodeXLGraphMLUtil.DefineVertexLabelGraphMLAttribute(Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Defines a GraphML-Attribute for vertex labels.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.NodeXLGraphMLUtil.DefineVertexCustomMenuGraphMLAttributes(Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Defines the GraphML-Attributes for vertex custom menu items.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.NodeXLGraphMLUtil.DefineImportedIDGraphMLAttribute(Smrf.XmlLib.GraphMLXmlDocument,System.Boolean)">
             <summary>
             Defines a GraphML-Attribute for imported IDs.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="forEdges">
             true if the attribute is for edges, false if it is for vertices.
             </param>
            
             <remarks>
             See the definition of ImportedIDID for more details.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.NodeXLGraphMLUtil.AppendEdgeXmlNode(Smrf.XmlLib.GraphMLXmlDocument,System.String,System.String,System.String)">
             <summary>
             Appends an edge XML node to a GraphML document.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="vertex1ID">
             ID of the edge's first vertex.
             </param>
            
             <param name="vertex2ID">
             ID of the edge's second vertex.
             </param>
            
             <param name="relationship">
             The relationship between the vertices.
             </param>
            
             <returns>
             The new edge XML node.
             </returns>
        </member>
        <member name="T:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil">
            <summary>
            Utility methods for creating Twitter GraphML XML documents for use with the
            NodeXL Excel Template.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.EdgeRelationshipDateUtcID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexLatestStatusID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexLatestStatusUrlsID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexLatestStatusDomainsID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexLatestStatusHashtagsID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexLatestStatusDateUtcID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.RepliesToRelationship">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.MentionsRelationship">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.NonRepliesToNonMentionsRelationship">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.EdgeStatusID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.EdgeStatusDateUtcID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.EdgeStatusUrlsID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.EdgeStatusDomainsID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.EdgeStatusHashtagsID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.EdgeStatusWebPageUrlID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexFollowedID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexFollowersID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexStatusesID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexFavoritesID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexUtcOffsetID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexDescriptionID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexLocationID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexUrlID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexTimeZoneID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.VertexJoinedDateUtcID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.LatitudeID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.LongitudeID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.InReplyToStatusIDID">
            
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.DefineVertexStatisticsGraphMLAttributes(Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Defines GraphML-Attributes for Twitter user statistics.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <remarks>
             The statistic attribute values appear on the vertex worksheet.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.DefineVertexLatestStatusGraphMLAttributes(Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Defines GraphML-Attributes for Twitter users' latest statuses.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <remarks>
             The latest status attribute values appear on the vertex worksheet.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.DefineEdgeStatusGraphMLAttributes(Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Defines GraphML-Attributes for statuses.
             </summary>
            
             <param name="graphMLXmlDocument">
             The GraphMLXmlDocument to populate with the requested network.
             </param>
            
             <remarks>
             The status attribute values appear on the edge worksheet.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.DefineCommonGraphMLAttributes(Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Defines GraphML-Attributes that are common to all Twitter networks.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <remarks>
             The common attribute values appear on the edge and vertex worksheets.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.DefineInReplyToStatusIDGraphMLAttribute(Smrf.XmlLib.GraphMLXmlDocument,System.Boolean)">
             <summary>
             Defines a GraphML-Attribute for in-reply-to status ID.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="forEdges">
             true if the attribute is for edges, false if it is for vertices.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.TryAppendVertexXmlNode(System.String,System.String,Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser},Smrf.NodeXL.GraphMLLib.TwitterUser@)">
             <summary>
             Appends a vertex XML node to the GraphML document for a user if such a
             node doesn't already exist.
             </summary>
            
             <param name="screenName">
             Screen name to add a vertex XML node for.
             </param>
            
             <param name="userID">
             Twitter user ID to add a vertex XML node for.
             </param>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="userIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.
             </param>
            
             <param name="twitterUser">
             Where the TwitterUser that represents the user gets stored.  This gets
             set regardless of whether the node already exists.
             </param>
            
             <returns>
             true if a vertex XML node was added, false if a vertex XML node already
             exists.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.AppendCommonUserInformationFromValueDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},Smrf.XmlLib.GraphMLXmlDocument,Smrf.NodeXL.GraphMLLib.TwitterUser)">
             <summary>
             Appends common GraphML-Attribute values from a user value dictionary
             returned by Twitter to a vertex XML node.
             </summary>
            
             <param name="userValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about the user.
             </param>
             
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="twitterUser">
             Contains the vertex XML node from <paramref
             name="graphMLXmlDocument" /> to add the GraphML attribute values to.
             </param>
            
             <remarks>
             This method reads information from a value dictionary returned by
             Twitter and appends the information to a vertex XML node in the GraphML
             document.
            
             <para>
             "Common" means that the information is included in all Twitter
             networks.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.AppendUserStatisticsFromValueDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},Smrf.XmlLib.GraphMLXmlDocument,Smrf.NodeXL.GraphMLLib.TwitterUser)">
             <summary>
             Appends GraphML-Attribute statistic values from a user value
             dictionary returned by Twitter to a vertex XML node.
             </summary>
            
             <param name="userValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about the user.
             </param>
             
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="twitterUser">
             Contains the vertex XML node from <paramref
             name="graphMLXmlDocument" /> to add the GraphML attribute values to.
             </param>
            
             <remarks>
             This method reads statistics information from a value dictionary
             returned by Twitter and appends the information to a vertex XML node in
             the GraphML document.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.AppendValueFromValueDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,Smrf.XmlLib.GraphMLXmlDocument,System.Xml.XmlNode,System.String)">
             <summary>
             Appends a GraphML-Attribute value from a value dictionary returned by
             Twitter to an edge or vertex XML node.
             </summary>
            
             <param name="valueDictionary">
             Name/value pairs parsed from a Twitter JSON response.
             </param>
             
             <param name="name">
             The name of the value to get from <paramref name="valueDictionary" />.
             </param>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="edgeOrVertexXmlNode">
             The edge or vertex XML node from <paramref
             name="graphMLXmlDocument" /> to add the GraphML attribute value to.
             </param>
            
             <param name="graphMLAttributeID">
             GraphML ID of the GraphML-Attribute.
             </param>
            
             <returns>
             true if the GraphML-Attribute was appended.
             </returns>
            
             <remarks>
             This method looks for a value named <paramref name="name" /> in
             <paramref name="valueDictionary" />.  If the value is found, it gets
             stored on <paramref name="edgeOrVertexXmlNode" /> as a
             GraphML-Attribute.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.GetLatitudeAndLongitudeFromStatusValueDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.String@,System.String@)">
             <summary>
             Attempts to get a latitude and longitude from a JSON value dictionary.
             </summary>
            
             <param name="statusValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about a status.
             </param>
            
             <param name="latitude">
             Where the latitude gets stored if it is available.  If it is not
             available, this gets set to null.
             </param>
            
             <param name="longitude">
             Where the longitude gets stored if it is available.  If it is not
             available, this gets set to null.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.GetUrlsAndHashtagsFromStatusValueDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.String@,System.String@)">
             <summary>
             Attempts to get URLs and hashtags from the entities in a JSON value
             dictionary.
             </summary>
            
             <param name="statusValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about a status.
             </param>
            
             <param name="expandUrls">
             true to expand all URLs that might be shortened URLs.
             </param>
            
             <param name="urls">
             Where the space-delimited URLs get stored if they are available.  If
             they are not available, this gets set to null.
             </param>
            
             <param name="hashtags">
             Where the space-delimited hashtags get stored if they are available.
             If they are not available, this gets set to null.  The hashtags are all
             in lower case and do not include a leading pound sign.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.AppendRepliesToAndMentionsEdgeXmlNodes(Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.IEnumerable{Smrf.NodeXL.GraphMLLib.TwitterUser},System.Collections.Generic.HashSet{System.String})">
             <overloads>
             Appends edge XML nodes for replies-to and mentions relationships.
             </overloads>
            
             <summary>
             Appends edge XML nodes for replies-to and mentions relationships for
             all statuses.
             </summary>
            
             <param name="graphmlXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="twitterUsers">
             Collection of the TwitterUsers in the network.
             </param>
            
             <param name="uniqueScreenNames">
             Collection of the unique screen names in the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.AppendLatitudeAndLongitudeGraphMLAttributeValues(Smrf.XmlLib.GraphMLXmlDocument,System.Xml.XmlNode,System.String,System.String)">
             <summary>
             Appends GraphML attribute values for latitude and longitude to an edge
             or vertex XML node.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="edgeOrVertexXmlNode">
             The edge or vertex XML node to add the Graph-ML attribute values to.
             </param>
            
             <param name="latitude">
             The latitude.  Can be null or empty.
             </param>
            
             <param name="longitude">
             The longitude.  Can be null or empty.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.AppendInReplyToStatusIDGraphMLAttributeValue(Smrf.XmlLib.GraphMLXmlDocument,System.Xml.XmlNode,System.String)">
             <summary>
             Appends a GraphML attribute value for an in-reply-to status ID.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="edgeOrVertexXmlNode">
             The edge or vertex XML node to add the Graph-ML attribute value to.
             </param>
            
             <param name="inReplyToStatusID">
             The in-reply-to status ID.  Can be null or empty.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.UrlsToDomains(System.String)">
             <summary>
             Extracts the domains from a string of space-delimited URLs.
             </summary>
            
             <param name="spaceDelimitedUrls">
             URLs delimited by spaces.  Can't be null.
             </param>
            
             <returns>
             Space-delimited domains, one per space-delimited URL.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.TwitterUsersToUniqueScreenNames(System.Collections.Generic.IEnumerable{Smrf.NodeXL.GraphMLLib.TwitterUser})">
             <summary>
             Creates a collection of unique screen names from a collection of
             TwitterUser objects.
             </summary>
            
             <param name="twitterUsers">
             Collection of the TwitterUsers in the network.
             </param>
            
             <returns>
             A collection of unique screen names. 
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.DefineLatitudeAndLongitudeGraphMLAttributes(Smrf.XmlLib.GraphMLXmlDocument,System.Boolean)">
             <summary>
             Defines GraphML-Attributes for latitude and longitude.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="forEdges">
             true if the attributes are for edges, false if they are for vertices.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.AppendRepliesToAndMentionsEdgeXmlNodes(Smrf.XmlLib.GraphMLXmlDocument,Smrf.SocialNetworkLib.Twitter.TwitterStatusTextParser,System.Collections.Generic.HashSet{System.String},System.String,Smrf.NodeXL.GraphMLLib.TwitterStatus)">
             <summary>
             Appends edge XML nodes for replies-to and mentions relationships for
             one status.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="twitterStatusTextParser">
             Parses the text of a Twitter status.
             </param>
            
             <param name="uniqueScreenNames">
             Collection of the unique screen names in the network.
             </param>
            
             <param name="screenName">
             The user's screen name.
             </param>
            
             <param name="twitterStatus">
             One of the user's statuses.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.AppendRepliesToAndMentionsEdgeXmlNode(Smrf.XmlLib.GraphMLXmlDocument,System.String,System.String,System.String,Smrf.NodeXL.GraphMLLib.TwitterStatus)">
             <summary>
             Appends an edge XML node for a replies-to, mentions, or non-replies-to-
             non-mentions relationship for one status.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="screenName1">
             The edge's first screen name.
             </param>
            
             <param name="screenName2">
             The edge's second screen name.
             </param>
            
             <param name="relationship">
             A description of the relationship represented by the edge.
             </param>
            
             <param name="twitterStatus">
             A twitter status.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterGraphMLUtil.FormatStatusWebPageUrl(System.String,Smrf.NodeXL.GraphMLLib.TwitterStatus)">
             <summary>
             Formats a string to use for a status Web page URL.
             </summary>
            
             <param name="screenName">
             The status's author.
             </param>
            
             <param name="twitterStatus">
             The twitter status.
             </param>
        </member>
        <member name="T:Smrf.NodeXL.GraphMLLib.TwitterSearchNetworkGraphMLUtil">
            <summary>
            Utility methods for creating Twitter search network GraphML XML documents
            for use with the NodeXL Excel Template.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterSearchNetworkGraphMLUtil.VertexToolTipID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterSearchNetworkGraphMLUtil.VertexTweetedSearchTermID">
            
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterSearchNetworkGraphMLUtil.CreateGraphMLXmlDocument">
             <summary>
             Creates a GraphMLXmlDocument representing a network of Twitter users.
             </summary>
            
             <returns>
             A GraphMLXmlDocument containing a Twitter search network.  The document
             includes GraphML-attribute definitions but no vertices or edges.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterSearchNetworkGraphMLUtil.TryAppendVertexXmlNode(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser},Smrf.NodeXL.GraphMLLib.TwitterUser@)">
             <summary>
             Appends a vertex XML node to the GraphML document for a person if such
             a node doesn't already exist.
             </summary>
            
             <param name="userValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about a user.
             </param>
            
             <param name="userTweetedSearchTerm">
             true if the user tweeted the search term.
             </param>
            
             <param name="graphMLXmlDocument">
             The GraphMLXmlDocument being populated.
             </param>
            
             <param name="userIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.
             </param>
            
             <param name="twitterUser">
             If true is returned, this is where the TwitterUser that represents the
             user gets stored.  This gets set regardless of whether the node already
             existed.
             </param>
            
             <returns>
             true if <paramref name="userValueDictionary" /> contained a valid user.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterSearchNetworkGraphMLUtil.AppendVertexTooltipXmlNodes(Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser})">
             <summary>
             Appends a vertex tooltip XML node for each person in the network.
             </summary>
            
             <param name="graphMLXmlDocument">
             The GraphMLXmlDocument being populated.
             </param>
            
             <param name="userIDDictionary">
             The key is the user ID and the value is the corresponding TwitterUser.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterSearchNetworkGraphMLUtil.TryAddStatusToUser(System.Collections.Generic.Dictionary{System.String,System.Object},Smrf.NodeXL.GraphMLLib.TwitterUser,System.Boolean)">
             <summary>
             Attempts to parse a status and add it to a user's status collection.
             </summary>
            
             <param name="statusValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about a status.
             </param>
            
             <param name="twitterUser">
             The user to add the status to.
             </param>
            
             <param name="expandStatusUrls">
             true to expand all URLs that might be shortened URLs.
             </param>
            
             <returns>
             true if successful.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterSearchNetworkGraphMLUtil.GetMentionsAndRepliesToScreenNames(System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser})">
             <summary>
             Gets the screen names that were mentioned or replied to by the people
             who tweeted the search term.
             </summary>
            
             <param name="userIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.
             </param>
            
             <returns>
             An array of screen names.  The names are unique.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterSearchNetworkGraphMLUtil.AppendTweetedSearchTermGraphMLAttributeValue(Smrf.XmlLib.GraphMLXmlDocument,Smrf.NodeXL.GraphMLLib.TwitterUser,System.Boolean)">
             <summary>
             Appends a GraphML attribute value to a vertex XML node that indicates
             whether the user tweeted the search term.
             </summary>
            
             <param name="graphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="twitterUser">
             Contains the vertex XML node from <paramref
             name="graphMLXmlDocument" /> to add the GraphML attribute value to.
             </param>
            
             <param name="userTweetedSearchTerm">
             true if the user tweeted the search term.
             </param>
        </member>
        <member name="T:Smrf.NodeXL.GraphMLLib.TwitterStatus">
             <summary>
             Stores information about a Twitter status.
             </summary>
            
             <remarks>
             This is meant for use while creating Twitter GraphML XML documents for use
             with the NodeXL Excel Template.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterStatus.TryFromStatusValueDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,Smrf.NodeXL.GraphMLLib.TwitterStatus@)">
             <summary>
             Attempts to create a new instance of the <see cref="T:Smrf.NodeXL.GraphMLLib.TwitterStatus"/>
             class from a Twitter JSON response.
             </summary>
            
             <param name="statusValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about a status.
             </param>
            
             <param name="expandStatusUrls">
             true to expand all URLs that might be shortened URLs.
             </param>
            
             <param name="twitterStatus">
             Where a new <see cref="T:Smrf.NodeXL.GraphMLLib.TwitterStatus"/> object gets stored if true is
             returned.
             </param>
            
             <returns>
             true if successful.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterStatus.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphMLLib.TwitterStatus"/> class.
             </summary>
            
             <param name="ID">
             The status ID.  Can't be null or empty.
             </param>
            
             <param name="text">
             The status text.  Can't be null or empty.
             </param>
            
             <param name="parsedDateUtc">
             The parsed status date as a culture-invariant UTC string, or null if
             not available.  See <see cref="M:Smrf.SocialNetworkLib.Twitter.TwitterDateParser.ParseTwitterDate(System.String)"/>.  Can be null.
             </param>
            
             <param name="latitude">
             The status's latitude, or null if not available.
             </param>
            
             <param name="longitude">
             The status's longitude, or null if not available.
             </param>
            
             <param name="urls">
             The status's space-delimited URLs, or null if not available.
             </param>
            
             <param name="hashtags">
             The status's space-delimited hashtags, or null if not available.
             </param>
            
             <param name="inReplyToStatusID">
             The in-reply-to status ID, or null if not available.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterStatus.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterStatus.m_ID">
            The status ID.
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterStatus.m_Text">
            The status text.
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterStatus.m_ParsedDateUtc">
            The parsed status date as a culture-invariant UTC string, or null.
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterStatus.m_Latitude">
            The status's latitude and longitude, or null.
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterStatus.m_Longitude">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterStatus.m_Urls">
            The status's space-delimited URLs, or null.
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterStatus.m_Hashtags">
            The status's space-delimited hashtags, or null.
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterStatus.m_InReplyToStatusID">
            The in-reply-to status ID, or null.
        </member>
        <member name="P:Smrf.NodeXL.GraphMLLib.TwitterStatus.ID">
             <summary>
             Gets the status ID.
             </summary>
            
             <value>
             The status ID.  Can't be null or empty.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphMLLib.TwitterStatus.Text">
             <summary>
             Gets the status text.
             </summary>
            
             <value>
             The status text.  Can't be null or empty.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphMLLib.TwitterStatus.ParsedDateUtc">
             <summary>
             Gets the parsed status date.
             </summary>
            
             <value>
             The parsed status date as a culture-invariant UTC string, or null if
             not available.  See <see cref="M:Smrf.SocialNetworkLib.Twitter.TwitterDateParser.ParseTwitterDate(System.String)"/>.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphMLLib.TwitterStatus.Latitude">
             <summary>
             Gets the status's latitude.
             </summary>
            
             <value>
             The status's latitude, or null if not available.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphMLLib.TwitterStatus.Longitude">
             <summary>
             Gets the status's longitude.
             </summary>
            
             <value>
             The status's longitude, or null if not available.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphMLLib.TwitterStatus.Urls">
             <summary>
             Gets or sets the status's space-delimited URLs.
             </summary>
            
             <value>
             The status's space-delimited URLs, or null if not available.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphMLLib.TwitterStatus.Hashtags">
             <summary>
             Gets the status's space-delimited hashtags.
             </summary>
            
             <value>
             The status's space-delimited hashtags, or null if not available.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphMLLib.TwitterStatus.InReplyToStatusID">
             <summary>
             Gets the ID of the status that this status is a reply to.
             </summary>
            
             <value>
             The in-reply-to status ID, or null if not available.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.GraphMLLib.TwitterUser">
             <summary>
             Represents a user in a Twitter network.
             </summary>
            
             <remarks>
             This class wraps the GraphML XML node that represents a user in a Twitter
             network, together with one or more statuses for the user.
            
             <para>
             This is meant for use while creating Twitter GraphML XML documents for use
             with the NodeXL Excel Template.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterUser.#ctor(System.String,System.Xml.XmlNode)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphMLLib.TwitterUser"/> class.
             </summary>
            
             <param name="screenName">
             The user's screen name.
             </param>
            
             <param name="vertexXmlNode">
             The vertex XmlNode from a GraphMLXmlDocument that represents the user
             in a Twitter network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphMLLib.TwitterUser.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterUser.m_ScreenName">
            The user's screen name.
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterUser.m_VertexXmlNode">
            The vertex XmlNode from a GraphMLXmlDocument that represents the user
            in a Twitter network.
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterUser.m_Statuses">
            Zero or more statuses associated with the user.
        </member>
        <member name="F:Smrf.NodeXL.GraphMLLib.TwitterUser.m_Tag">
            Arbitrary extra data.
        </member>
        <member name="P:Smrf.NodeXL.GraphMLLib.TwitterUser.VertexXmlNode">
             <summary>
             Gets the vertex XmlNode that represents the user.
             </summary>
            
             <value>
             The XmlNode from a GraphMLXmlDocument that represents the user.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphMLLib.TwitterUser.ScreenName">
             <summary>
             Gets the user's screen name.
             </summary>
            
             <value>
             The user's screen name.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphMLLib.TwitterUser.Statuses">
             <summary>
             Gets a collection of statuses associated with the user.
             </summary>
            
             <value>
             A collection of zero or more statuses associated with the user.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphMLLib.TwitterUser.Tag">
             <summary>
             Gets or sets arbitrary extra data associated with the user.
             </summary>
            
             <value>
             Arbitrary extra data associated with the user, as an Object.  The
             default value is null.
             </value>
        </member>
        <member name="T:Smrf.SocialNetworkLib.ReportProgressHandler">
             <summary>
             Represents a method that will be called while getting a network.
             </summary>
            
             <param name="progress">
             A progress message suitable for display in the UI.
             </param>
        </member>
        <member name="T:Smrf.SocialNetworkLib.CheckCancellationPendingHandler">
            <summary>
            Represents a method that will be called while getting a network.
            </summary>
        </member>
        <member name="T:Smrf.SocialNetworkLib.HttpSocialNetworkUtil">
            <summary>
            Utility methods for getting social networks via HTTP requests.
            </summary>
        </member>
        <member name="M:Smrf.SocialNetworkLib.HttpSocialNetworkUtil.CreateHttpWebRequest(System.String,System.String,System.Int32)">
             <summary>
             Gets an HttpWebRequest object to use.
             </summary>
            
             <param name="url">
             URL to use.
             </param>
            
             <param name="userAgent">
             The user agent string to use.
             </param>
            
             <param name="timeoutMs">
             Timeout to use, in milliseconds.
             </param>
            
             <returns>
             The HttpWebRequest object.
             </returns>
            
             <remarks>
             This method handles Web proxies that requre authentication.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.HttpSocialNetworkUtil.GetHttpWebResponseStreamWithRetries(System.String,System.Net.HttpStatusCode[],Smrf.SocialNetworkLib.RequestStatistics,System.String,System.Int32,Smrf.SocialNetworkLib.ReportProgressHandler,Smrf.SocialNetworkLib.CheckCancellationPendingHandler)">
             <summary>
             Gets a response stream given an URL.  Retries after an error.
             </summary>
            
             <param name="url">
             URL to use.
             </param>
            
             <param name="httpStatusCodesToFailImmediately">
             An array of status codes that should be failed immediately, or null to
             retry all failures.  An example is HttpStatusCode.Unauthorized (401),
             which Twitter returns when information about a user who has "protected"
             status is requested.  This should not be retried, because the retries
             would produce exactly the same error response.
             </param>
            
             <param name="requestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="userAgent">
             The user agent string to use.
             </param>
            
             <param name="timeoutMs">
             Timeout to use, in milliseconds.
             </param>
            
             <param name="reportProgressHandler">
             Method that will be called to report progress.  Can be null.
             </param>
            
             <param name="checkCancellationPendingHandler">
             Method that will be called to check for cancellation.  Can be null.
             </param>
            
             <returns>
             The response stream.  The caller MUST close the stream when it is done.
             </returns>
            
             <remarks>
             If the request fails and the HTTP status code is not one of the codes
             specified in <paramref name="httpStatusCodesToFailImmediately"/>, the
             request is retried.  If the retries also fail, an exception is thrown.
            
             <para>
             If the request fails with one of the HTTP status code contained in
             <paramref name="httpStatusCodesToFailImmediately"/>, an exception is
             thrown immediately.
             </para>
            
             <para>
             In either case, it is always up to the caller to handle the exceptions.
             This method never ignores an exception; it either retries it and throws
             it if all retries fail, or throws it immediately.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.HttpSocialNetworkUtil.WebExceptionHasHttpStatusCode(System.Net.WebException,System.Net.HttpStatusCode[])">
             <summary>
             Determines whether a WebException has an HttpWebResponse with one of a
             specified set of HttpStatusCodes.
             </summary>
            
             <param name="webException">
             The WebException to check.
             </param>
            
             <param name="httpStatusCodes">
             One or more HttpStatus codes to look for.
             </param>
            
             <returns>
             true if <paramref name="webException" /> has an HttpWebResponse with
             an HttpStatusCode contained within <paramref name="httpStatusCodes" />.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.HttpSocialNetworkUtil.ExceptionIsWebOrXml(System.Exception)">
             <summary>
             Determines whether an exception is a WebException or XmlException.
             </summary>
            
             <param name="exception">
             The exception to test.
             </param>
            
             <returns>
             true if the exception is a WebException or XmlException.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.HttpSocialNetworkUtil.ExceptionIsWebOrJson(System.Exception)">
             <summary>
             Determines whether an exception is a WebException or an exception
             thrown while parsing JSON.
             </summary>
            
             <param name="exception">
             The exception to test.
             </param>
            
             <returns>
             true if the exception is a WebException or an exception thrown by the
             JavaScriptSerializer class.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.HttpSocialNetworkUtil.GetHttpWebResponseStreamNoRetries(System.Net.HttpWebRequest)">
             <summary>
             Gets a response stream given an HttpWebRequest object.  Does not retry
             after an error.
             </summary>
            
             <param name="oHttpWebRequest">
             HttpWebRequest object to use.
             </param>
            
             <returns>
             The response stream.  The caller MUST close the stream when it is done.
             </returns>
            
             <remarks>
             This method sets several properties on <paramref
             name="oHttpWebRequest" /> before it is used.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.HttpSocialNetworkUtil.ReportProgress(Smrf.SocialNetworkLib.ReportProgressHandler,System.String,System.Object[])">
             <summary>
             Reports progress while getting a network.
             </summary>
            
             <param name="reportProgressHandler">
             Method that will be called to report progress.  Can be null.
             </param>
            
             <param name="progressFormat">
             A composite format string.  Can be empty but not null.
             </param>
            
             <param name="progressArguments">
             An Object array containing zero or more objects to format. 
             </param>
        </member>
        <member name="F:Smrf.SocialNetworkLib.HttpSocialNetworkUtil.HttpRetryDelaysSec">
            Time to wait between retries to the HTTP Web service, in seconds.  The
            length of the array determines the number of retries: three array
            elements means there will be up to three retries, or four attempts
            total.
        </member>
        <member name="T:Smrf.SocialNetworkLib.NetworkLevel">
             <summary>
             Represents a level in a network.
             </summary>
            
             <remarks>
             "Level" is another word for "degree," as in a 1.5-degree network.
             "Degree" is avoided because it has an additional meaning in networks
             (vertex degree) and could thus be confusing.
             </remarks>
        </member>
        <member name="F:Smrf.SocialNetworkLib.NetworkLevel.One">
            <summary>
            1-level network.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.NetworkLevel.OnePointFive">
            <summary>
            1.5-level network.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.NetworkLevel.Two">
            <summary>
            2-level network.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.NetworkLevel.TwoPointFive">
            <summary>
            2.5-level network.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.NetworkLevel.Three">
            <summary>
            3-level network.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.NetworkLevel.ThreePointFive">
            <summary>
            3.5-level network.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.NetworkLevel.Four">
            <summary>
            4-level network.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.NetworkLevel.FourPointFive">
            <summary>
            4.5-level network.
            </summary>
        </member>
        <member name="T:Smrf.SocialNetworkLib.RequestStatistics">
             <summary>
             Keeps track of requests that have been made while getting a network.
             </summary>
            
             <remarks>
             Call <see cref="M:Smrf.SocialNetworkLib.RequestStatistics.OnSuccessfulRequest"/> each time a network request
             succeeds.  Call <see cref="M:Smrf.SocialNetworkLib.RequestStatistics.OnUnexpectedException(System.Exception)"/> each time a network
             request fails (after retries) with an unexpected exception.  After all
             requests have been made, read the <see cref="P:Smrf.SocialNetworkLib.RequestStatistics.SuccessfulRequests"/>, <see cref="P:Smrf.SocialNetworkLib.RequestStatistics.UnexpectedExceptions"/>, and <see cref="P:Smrf.SocialNetworkLib.RequestStatistics.LastUnexpectedException"/>
             properties to create a request summary.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.RequestStatistics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/>
            class.
            </summary>
        </member>
        <member name="M:Smrf.SocialNetworkLib.RequestStatistics.OnSuccessfulRequest">
            <summary>
            Increments the number of successful requests that have been made while
            getting the network.
            </summary>
        </member>
        <member name="M:Smrf.SocialNetworkLib.RequestStatistics.OnUnexpectedException(System.Exception)">
            <summary>
            Increments the number of unexpected exceptions (after retries) that
            occurred while getting the network.
            </summary>
        </member>
        <member name="M:Smrf.SocialNetworkLib.RequestStatistics.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.RequestStatistics.m_iSuccessfulRequests">
            Number of successful requests that were made while getting the network.
        </member>
        <member name="F:Smrf.SocialNetworkLib.RequestStatistics.m_iUnexpectedExceptions">
            Number of unexpected exceptions (after retries) that occurred while
            getting the network.
        </member>
        <member name="F:Smrf.SocialNetworkLib.RequestStatistics.m_oLastUnexpectedException">
            The most recent unexpected exception (after retries) that occurred
            while getting the network, or null if none has occurred.
        </member>
        <member name="F:Smrf.SocialNetworkLib.RequestStatistics.m_oStartTimeUtc">
            Start time of the network request, in UTC.
        </member>
        <member name="P:Smrf.SocialNetworkLib.RequestStatistics.SuccessfulRequests">
             <summary>
             Gets the number of successful requests that were made while getting the
             network.
             </summary>
            
             <value>
             The number of successful requests.
             </value>
        </member>
        <member name="P:Smrf.SocialNetworkLib.RequestStatistics.UnexpectedExceptions">
             <summary>
             Gets the number of unexpected exceptions (after retries) that occurred
             while getting the network.
             </summary>
            
             <value>
             The number of unexpected exceptions.
             </value>
        </member>
        <member name="P:Smrf.SocialNetworkLib.RequestStatistics.LastUnexpectedException">
             <summary>
             Gets the most recent unexpected exception (after retries) that occurred
             while getting the network.
             </summary>
            
             <value>
             The most recent unexpected exception, or null if none have occurred.
             </value>
        </member>
        <member name="P:Smrf.SocialNetworkLib.RequestStatistics.StartTimeUtc">
             <summary>
             Gets the start time of the network request, in UTC.
             </summary>
            
             <value>
             The start time of the network request, in UTC.
             </value>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.OAuthBase.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Helper function to compute a hash value
            </summary>
            <param name="hashAlgorithm">The hashing algoirhtm used. If that algorithm needs some initialization, like HMAC and its derivatives, they should be initialized prior to passing it to this function</param>
            <param name="data">The data to hash</param>
            <returns>a Base64 string of the hash value</returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.OAuthBase.GetQueryParameters(System.String)">
            <summary>
            Internal function to cut out all non oauth query string parameters (all parameters not begining with "oauth_")
            </summary>
            <param name="parameters">The query string part of the Url</param>
            <returns>A list of QueryParameter each containing the parameter name and value</returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.OAuthBase.UrlEncode(System.String)">
            <summary>
            This is a different Url Encode implementation since the default .NET one outputs the percent encoding in lower case.
            While this is not a problem with the percent encoding spec, it is used in upper case throughout OAuth
            </summary>
            <param name="value">The value to Url encode</param>
            <returns>Returns a Url encoded string</returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.OAuthBase.NormalizeRequestParameters(System.Collections.Generic.IList{Smrf.SocialNetworkLib.Twitter.OAuthBase.QueryParameter})">
            <summary>
            Normalizes the request parameters according to the spec
            </summary>
            <param name="parameters">The list of parameters already sorted</param>
            <returns>a string representing the normalized parameters</returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.OAuthBase.GenerateSignatureBase(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            Generate the signature base that is used to produce the signature
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>        
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="signatureType">The signature type. To use the default values use <see cref="T:Smrf.SocialNetworkLib.Twitter.OAuthBase.SignatureTypes">OAuthBase.SignatureTypes</see>.</param>
            <returns>The signature base</returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.OAuthBase.GenerateSignatureUsingHash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Generate the signature value based on the given signature base and hash algorithm
            </summary>
            <param name="signatureBase">The signature based as produced by the GenerateSignatureBase method or by any other means</param>
            <param name="hash">The hash algorithm used to perform the hashing. If the hashing algorithm requires initialization or a key it should be set prior to calling this method</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            Generates a signature using the HMAC-SHA1 algorithm
            </summary>      
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Smrf.SocialNetworkLib.Twitter.OAuthBase.SignatureTypes,System.String@,System.String@)">
            <summary>
            Generates a signature using the specified signatureType 
            </summary>      
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="signatureType">The type of signature to use</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.OAuthBase.GenerateTimeStamp">
            <summary>
            Generate the timestamp for the signature        
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.OAuthBase.GenerateNonce">
            <summary>
            Generate a nonce
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smrf.SocialNetworkLib.Twitter.OAuthBase.SignatureTypes">
            <summary>
            Provides a predefined set of algorithms that are supported officially by the protocol
            </summary>
        </member>
        <member name="T:Smrf.SocialNetworkLib.Twitter.OAuthBase.QueryParameter">
            <summary>
            Provides an internal structure to sort the query parameter
            </summary>
        </member>
        <member name="T:Smrf.SocialNetworkLib.Twitter.OAuthBase.QueryParameterComparer">
            <summary>
            Comparer class used to perform the sorting of the query parameters
            </summary>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.oAuthTwitter.AuthorizationLinkGet">
            <summary>
            Get the link to Twitter's authorization page for this application.
            </summary>
            <returns>The url with a valid request token.</returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.oAuthTwitter.AccessTokenGet(System.String,System.String)">
            <summary>
            Exchange the request token for an access token.
            </summary>
            <param name="authToken">The oauth_token is supplied by Twitter's authorization page following the callback.</param>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.oAuthTwitter.ConstructAuthWebRequest(Smrf.SocialNetworkLib.Twitter.oAuthTwitter.Method,System.String,System.String,System.String@,System.String@)">
            <summary>
            Constructs the URL and POST data to use for a web request using
            oAuth.
            </summary>
            <param name="method">GET or POST</param>
            <param name="url">The full url, including the querystring.</param>
            <param name="postData">Data to post (querystring format)</param>
            <param name="authorizedUrl">The url with authorization information added.</param>
            <param name="authorizedPostData">The POST data with authorization information added.</param>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.oAuthTwitter.oAuthWebRequest(Smrf.SocialNetworkLib.Twitter.oAuthTwitter.Method,System.String,System.String)">
            <summary>
            Submit a web request using oAuth.
            </summary>
            <param name="method">GET or POST</param>
            <param name="url">The full url, including the querystring.</param>
            <param name="postData">Data to post (querystring format)</param>
            <returns>The web server response.</returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.oAuthTwitter.WebRequest(Smrf.SocialNetworkLib.Twitter.oAuthTwitter.Method,System.String,System.String)">
            <summary>
            Web Request Wrapper
            </summary>
            <param name="method">Http Method</param>
            <param name="url">Full url to the web resource</param>
            <param name="postData">Data to post in querystring format</param>
            <returns>The web server response.</returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.oAuthTwitter.WebResponseGet(System.Net.HttpWebRequest)">
            <summary>
            Process the web response.
            </summary>
            <param name="webRequest">The request object.</param>
            <returns>The response data.</returns>
        </member>
        <member name="T:Smrf.SocialNetworkLib.Twitter.TwitterApiUrlParameters">
            <summary>
            Provides URL parameters for the Twitter API.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.Twitter.TwitterApiUrlParameters.IncludeEntities">
            <summary>
            Include entities in the response.
            </summary>
        </member>
        <member name="T:Smrf.SocialNetworkLib.Twitter.TwitterApiUrls">
            <summary>
            Provides URLs for the Twitter API.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.Twitter.TwitterApiUrls.OAuth">
            <summary>
            OAuth API.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.Twitter.TwitterApiUrls.Rest">
            <summary>
            REST API.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.Twitter.TwitterApiUrls.Search">
            <summary>
            Search API.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.Twitter.TwitterApiUrls.UserWebPageUrlPattern">
            <summary>
            Format pattern for the URL of the Web page for a Twitter user.  The {0}
            argument must be replaced with a Twitter screen name.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.Twitter.TwitterApiUrls.StatusWebPageUrlPattern">
            <summary>
            Format pattern for the URL of the Web page for a Twitter status.  The
            {0} argument must be replaced with a Twitter screen name and the {1}
            argument must be replaced with a status ID.
            </summary>
        </member>
        <member name="T:Smrf.SocialNetworkLib.Twitter.TwitterDateParser">
             <summary>
             Parses dates received from the Twitter API.
             </summary>
            
             <remarks>
             As of July 2010, Twitter uses two date formats: one for the REST API, and
             another for the search API.  This class can parse both formats.
            
             <para>
             All methods are static.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterDateParser.ParseTwitterDate(System.String)">
             <summary>
             Parses a date received from the Twitter API.
             </summary>
            
             <param name="twitterDate">
             Date received from the Twitter API.  Can't be null.
             </param>
            
             <returns>
             The parsed date as a culture-invariant UTC string if parsing
             succeeded, or <paramref name="twitterDate" /> if parsing failed.
             Sample parsed date: "2006-04-17 21:22:48".
             </returns>
            
             <remarks>
             If <paramref name="twitterDate" /> can be parsed into a DateTime, this
             method converts that DateTime to a culture-invariant UTC string and
             returns the string.  Otherwise, <paramref name="twitterDate" /> is
             returned unmodified.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterDateParser.TryParseTwitterDate(System.String,System.DateTime@)">
             <summary>
             Attempts to parse a date received from the Twitter API.
             </summary>
            
             <param name="twitterDate">
             Date received from the Twitter API.  Can't be null.
             </param>
            
             <param name="parsedTwitterDate">
             Where the parsed DateTime gets stored if true is returned.  The Kind of
             the DateTime is DateTimeKind.Utc.
             </param>
            
             <returns>
             true if <paramref name="twitterDate" /> was successfully parsed.
             </returns>
        </member>
        <member name="T:Smrf.SocialNetworkLib.Twitter.TwitterJsonUtil">
            <summary>
            Provides utility methods for parsing JSON received from Twitter.
            </summary>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterJsonUtil.IsValidJson(System.String)">
             <summary>
             Determines whether a string contains valid JSON.
             </summary>
            
             <param name="stringToCheck">
             The string to check.  Can be empty but not null.
             </param>
            
             <returns>
             true if string appears to contain valid JSON.
             </returns>
            
             <remarks>
             The check is quick and dirty, not a thorough test.  It's meant to
             quickly reject obviously bad JSON.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterJsonUtil.TryGetJsonValueFromDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String@)">
             <overloads>
             Attempts to get a value from a JSON value dictionary.
             </overloads>
            
             <summary>
             Attempts to get a non-empty string value from a JSON value dictionary.
             </summary>
            
             <param name="valueDictionary">
             Name/value pairs parsed from a Twitter JSON response.
             </param>
            
             <param name="name">
             The name of the value to get.
             </param>
            
             <param name="value">
             Where the non-empty value gets stored if true is returned.  If false is
             returned, this gets set to null.
             </param>
            
             <returns>
             true if the non-empty value was obtained.
             </returns>
            
             <remarks>
             This method attempts to get the specified value, which can be of any
             JSON type, from <paramref name="valueDictionary" />.  If the value is
             found, this method converts it to a string, stores it at <paramref
             name="value" />, and returns true.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterJsonUtil.TryGetJsonValueFromDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Int64@)">
             <summary>
             Attempts to get an Int64 value from a JSON value dictionary.
             </summary>
            
             <param name="valueDictionary">
             Name/value pairs parsed from a Twitter JSON response.
             </param>
            
             <param name="name">
             The name of the value to get.
             </param>
            
             <param name="value">
             Where the value gets stored if true is returned.  If false is returned,
             this gets set to Int64.MinValue.
             </param>
            
             <returns>
             true if the value was obtained.
             </returns>
            
             <remarks>
             This method attempts to get the specified value, which must be of type
             Int64, from <paramref name="valueDictionary" />.  If the value is
             found, it gets stored at <paramref name="value" /> and true is
             returned.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterJsonUtil.TryConvertJsonValueToString(System.Object,System.String@)">
             <summary>
             Attempts to convert a JSON value to a non-empty string.
             </summary>
            
             <param name="value">
             A JSON value to convert.  Can be null.
             </param>
            
             <param name="valueAsString">
             Where the non-empty value gets stored if true is returned.  If false is
             returned, this gets set to null.
             </param>
            
             <returns>
             true if the value was converted.
             </returns>
            
             <remarks>
             If <paramref name="value" /> is not null and can be converted to a
             non-empty string, the string gets stored at <paramref
             name="valueAsString" /> and true is returned.  false is returned
             otherwise.
             </remarks>
        </member>
        <member name="T:Smrf.SocialNetworkLib.Twitter.TwitterListNameParser">
             <summary>
             Parses Twitter list names.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterListNameParser.TryParseListName(System.String,System.String@,System.String@)">
             <summary>
             Attempts to parse a Twitter list name into a slug and owner screen
             name.
             </summary>
            
             <param name="listName">
             List name in the format "bob/twitterit".  Can't be null.
             </param>
            
             <param name="slug">
             Where the slug gets stored if true is returned.  Sample: "twitterit".
             </param>
            
             <param name="ownerScreenName">
             Where the owner screen name gets stored if true is returned.  Sample:
             "bob".
             </param>
            
             <returns>
             true if the list name was successfully parsed, false if the list name
             is not valid.
             </returns>
        </member>
        <member name="T:Smrf.SocialNetworkLib.Twitter.TwitterStatusParser">
             <summary>
             Parses a Twitter status.
             </summary>
            
             <remarks>
             A tweet is known as a "status" in the Twitter API, so "status" is the term
             used in this class's methods.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterStatusParser.TryParseStatus(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64@,System.DateTime@,System.String@,System.String@,System.String@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
             <summary>
             Attempts to parse basic information from a Twitter status.
             </summary>
            
             <param name="statusValueDictionary">
             A status value dictionary, as returned by
             TwitterUtil.EnumerateSearchStatuses().  The dictionary keys are names
             and the dictionary values are the named values.
             </param>
             
             <param name="statusID">
             Where the status ID gets stored if true is returned.
             </param>
            
             <param name="statusDateUtc">
             Where the date the user tweeted the status gets stored if true is
             returned.
             </param>
            
             <param name="screenName">
             Where the screen name of the user who tweeted the status gets stored if
             true is returned.
             </param>
            
             <param name="text">
             Where the status's text gets stored if true is returned.
             </param>
            
             <param name="rawStatusJson">
             Where the complete, raw status returned by Twitter gets stored if true
             is returned, in JSON format.  Includes the surrounding braces.
             </param>
             
             <param name="userValueDictionary">
             Where a dictionary of values for the user who tweeted the status gets
             stored if true is returned.
             </param>
             
             <returns>
             true if successful.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterStatusParser.UserValueDictionaryToRawJson(System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             Converts a user value dictionary to a JSON string.
             </summary>
            
             <param name="userValueDictionary">
             A user value dictionary, as returned by <see cref="M:Smrf.SocialNetworkLib.Twitter.TwitterStatusParser.TryParseStatus(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64@,System.DateTime@,System.String@,System.String@,System.String@,System.Collections.Generic.Dictionary{System.String,System.Object}@)"/>.
             The dictionary keys are names and the dictionary values are the named
             values.
             </param>
             
             <returns>
             The user value dictionary as a JSON string.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterStatusParser.GetUrlsFromStatusValueDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
             <summary>
             Get the URLs from the entities in a JSON value dictionary.
             </summary>
            
             <param name="statusValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about a status.
             </param>
            
             <param name="expandUrls">
             true to expand all URLs that might be shortened URLs.
             </param>
            
             <returns>
             An array of URLs.  If the status value dictionary didn't contain URLs,
             the array is empty.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterStatusParser.GetHashtagsFromStatusValueDictionary(System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             Get the hashtags from the entities in a JSON value dictionary.
             </summary>
            
             <param name="statusValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about a status.
             </param>
            
             <returns>
             An array of hashtags.  The hashtags are all in lower case and do not
             include a leading pound sign.  If the status value dictionary didn't
             contain hashtags, the array is empty.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterStatusParser.TryGetEntityValueDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object}@)">
             <summary>
             Attempts to an entity value dictionary from a status value dictionary.
             </summary>
            
             <param name="statusValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about a status.
             </param>
            
             <param name="entityValueDictionary">
             Where the entity value dictionary gets stored if true is returned.
             </param>
            
             <returns>
             true if successful.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterStatusParser.GetEntities(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.Boolean)">
             <summary>
             Attempts to get entities from a JSON value dictionary.
             </summary>
            
             <param name="entityValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains all
             entities for a status.
             </param>
            
             <param name="entityName">
             Name of the value in <paramref name="entityValueDictionary" />
             containing the entities to get.  Sample: "urls".  The value is assumed
             to contain an array of entity objects; an array of URL objects, for
             example. 
             </param>
            
             <param name="entityChildName">
             Name of the child value in each entity to get.  Sample: "expanded_url".
             </param>
            
             <param name="convertToLowerCase">
             True to convert all the returned entities to lower case.
             </param>
            
             <returns>
             An array of entities.  The array may be empty.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterStatusParser.ValueDictionaryToRawJson(System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             Converts a value dictionary to a JSON string.
             </summary>
            
             <param name="valueDictionary">
             A value dictionary obtained by parsing a JSON string.  The dictionary
             keys are names and the dictionary values are the named values.
             </param>
             
             <returns>
             The value dictionary as a JSON string.
             </returns>
        </member>
        <member name="T:Smrf.SocialNetworkLib.Twitter.TwitterUtil">
            <summary>
            Provides utility methods for getting social networks from Twitter.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.Twitter.TwitterUtil.DefaultRateLimitPauseMs">
            Default time to pause before retrying a request after Twitter rate
            limits kick in, in milliseconds.
        </member>
        <member name="F:Smrf.SocialNetworkLib.Twitter.TwitterUtil.ExtraRateLimitPauseMs">
            Extra time to add to the pause, in milliseconds.
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterUtil.#ctor(System.String,System.String,System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.SocialNetworkLib.Twitter.TwitterUtil"/> class.
             </summary>
            
             <param name="twitterAccessToken">
             The Twitter access token to use.
             </param>
            
             <param name="twitterAccessTokenSecret">
             The Twitter access token secret to use.
             </param>
            
             <param name="userAgent">
             The user agent string to use for web requests.
             </param>
            
             <param name="timeoutMs">
             Timeout to use for web requests, in milliseconds.
             </param>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterUtil.EnumerateSearchStatuses(System.String,System.Int32,Smrf.SocialNetworkLib.RequestStatistics,Smrf.SocialNetworkLib.ReportProgressHandler,Smrf.SocialNetworkLib.CheckCancellationPendingHandler)">
             <summary>
             Enumerates through the statuses that include a specified search term.
             </summary>
            
             <param name="searchTerm">
             The term to search for.
             </param>
            
             <param name="maximumStatuses">
             Maximum number of tweets to request.  Can't be Int32.MaxValue.
             </param>
            
             <param name="requestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="reportProgressHandler">
             Method that will be called to report progress.  Can be null.
             </param>
            
             <param name="checkCancellationPendingHandler">
             Method that will be called to check for cancellation.  Can be null.
             </param>
            
             <returns>
             A Dictionary for each status, returned one by one.  The dictionary keys
             are names and the dictionary values are the named values.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterUtil.EnumerateUserValueDictionaries(System.String[],System.Boolean,Smrf.SocialNetworkLib.RequestStatistics,Smrf.SocialNetworkLib.ReportProgressHandler,Smrf.SocialNetworkLib.CheckCancellationPendingHandler)">
             <summary>
             Enumerates through a collection of dictionaries of values for a
             collection of specified users.
             </summary>
            
             <param name="userIDsOrScreenNames">
             Array of user IDs or screen names to get user value dictionaries for.
             </param>
            
             <param name="userIDsSpecified">
             true if <paramref name="userIDsOrScreenNames"/> contains IDs, false if
             it contains screen names.
             </param>
            
             <param name="requestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="reportProgressHandler">
             Method that will be called to report progress.  Can be null.
             </param>
            
             <param name="checkCancellationPendingHandler">
             Method that will be called to check for cancellation.  Can be null.
             </param>
            
             <returns>
             The enumerated values are returned one-by-one, as a dictionary.
             </returns>
            
             <remarks>
             For each user ID or screen name in <paramref name="userIDsOrScreenNames"/>, this method gets information about
             the user from Twitter and returns it as a dictionary of values.  The
             order of the returned values is not necessarily the same as the order
             of the user IDs or screen names.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterUtil.EnumerateJsonValues(System.String,System.String,System.Int32,System.Boolean,Smrf.SocialNetworkLib.RequestStatistics,Smrf.SocialNetworkLib.ReportProgressHandler,Smrf.SocialNetworkLib.CheckCancellationPendingHandler)">
             <summary>
             Gets a JSON response from a Twitter URL that uses cursoring, then
             enumerates a specified set of values in the response.
             </summary>
            
             <param name="url">
             The URL to get the JSON from.  Can include URL parameters.
             </param>
            
             <param name="jsonName">
             If the top level of the JSON response contains a set of name/value
             pairs, this parameter should be the name whose value is the array of
             objects this method will enumerate.  If the top level of the JSON
             response contains an array of objects this method will enumerate, this
             parameter should be null. 
             </param>
            
             <param name="maximumValues">
             Maximum number of values to return, or Int32.MaxValue for no limit.
             </param>
            
             <param name="skipMostPage1Errors">
             If true, most page-1 errors are skipped over.  If false, they are
             rethrown.  (Errors that occur on page 2 and above are always skipped,
             unless they are due to rate limiting.)
             </param>
            
             <param name="requestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="reportProgressHandler">
             Method that will be called to report progress.  Can be null.
             </param>
            
             <param name="checkCancellationPendingHandler">
             Method that will be called to check for cancellation.  Can be null.
             </param>
            
             <returns>
             The enumerated values are returned one-by-one, as an Object.
             </returns>
            
             <remarks>
             It's assumed that the Twitter API specified by <paramref name="url"/>
             uses Twitter's cursor scheme for paging, where a "cursor" URL parameter
             specifies which page to get.  "GET friends/ids" is an example of such
             an API.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterUtil.EncodeUrlParameter(System.String)">
             <summary>
             Encodes an URL parameter using a method appropriate for Twitter and
             OAuth.
             </summary>
            
             <param name="urlParameter">
             The URL parameter to be encoded.  Can't be null.
             </param>
            
             <returns>
             The encoded parameter.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterUtil.GetTwitterResponseAsString(System.String,Smrf.SocialNetworkLib.RequestStatistics,Smrf.SocialNetworkLib.ReportProgressHandler,Smrf.SocialNetworkLib.CheckCancellationPendingHandler)">
             <summary>
             Gets a response from a Twitter URL as a string.
             </summary>
            
             <param name="url">
             The URL to get the string from.
             </param>
            
             <param name="requestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="reportProgressHandler">
             Method that will be called to report progress.  Can be null.
             </param>
            
             <param name="checkCancellationPendingHandler">
             Method that will be called to check for cancellation.  Can be null.
             </param>
            
             <returns>
             The string returned by the Twitter server.
             </returns>
            
             <remarks>
             If an error occurs, an exception is thrown.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterUtil.GetTwitterResponseAsString(System.IO.Stream)">
             <summary>
             Gets a response from a Twitter stream as a string.
             </summary>
            
             <param name="oStream">
             The stream to read.
             </param>
            
             <returns>
             The string returned by the Twitter server.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterUtil.OnExceptionWhileEnumeratingJsonValues(System.Exception,System.Int32,System.Boolean)">
             <summary>
             Handles an exception throws while enumerating JSON values.
             </summary>
            
             <param name="exception">
             The exception that was thrown.
             </param>
            
             <param name="iPage">
             The page the exception was thrown from.
             </param>
            
             <param name="bSkipMostPage1Errors">
             If true, most page-1 errors are skipped over.  If false, they are
             rethrown.  (Errors that occur on page 2 and above are always skipped,
             unless they are due to rate limiting.)
             </param>
            
             <remarks>
             If <paramref name="exception" /> is fatal, this method rethrows the
             exception.  Otherwise, this method returns and the caller should stop
             its enumeration but not throw an exception.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterUtil.WebExceptionIsDueToRateLimit(System.Net.WebException)">
             <summary>
             Determines whether a WebException is due to Twitter rate limits.
             </summary>
            
             <param name="webException">
             The WebException to check.
             </param>
            
             <returns>
             true if <paramref name="webException" /> is due to Twitter rate limits
             kicking in.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterUtil.GetSearchUrl(System.String,System.String)">
             <summary>
             Gets the URL for getting tweets with a specified search term.
             </summary>
            
             <param name="sSearchTerm">
             The term to search for.
             </param>
            
             <param name="sQueryParametersForNextPage">
             The complete query parameters to use if getting page number 2 or
             greater, or null if getting the first page.
             </param>
            
             <returns>
             The URL to use.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterUtil.TryGetQueryParametersForNextSearchPage(System.Collections.Generic.Dictionary{System.String,System.Object},System.String@)">
             <summary>
             Attempts to get the query parameters to use for the next page of search
             results.
             </summary>
            
             <param name="oResponseDictionary">
             Response returned by Twitter for the current page.
             </param>
            
             <param name="sQueryParametersForNextPage">
             Where the complete query parameters to use get stored if true is
             returned.  Includes a leading question mark.
             </param>
            
             <returns>
             true if successful.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterUtil.AppendCursorToUrl(System.String,System.String)">
             <summary>
             Appends a cursor to a Twitter URL.
             </summary>
            
             <param name="sUrl">
             The URL to append to.  Can include URL parameters.
             </param>
            
             <param name="sCursor">
             The cursor to append, or null to not append a cursor.
             </param>
            
             <returns>
             <paramref name="sUrl" /> with a cursor appended to it if requested.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterUtil.GetRateLimitPauseMs(System.Net.WebException)">
             <summary>
             Gets the time to pause before retrying a request after Twitter rate
             limits kicks in.
             </summary>
            
             <param name="oWebException">
             The WebException to check.
             </param>
            
             <returns>
             The time to pause before retrying a request after Twitter rate limits
             kick in, in milliseconds.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.Twitter.TwitterUtil.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.Twitter.TwitterUtil.HttpStatusCodesToFailImmediately">
            HTTP status codes that have special meaning with Twitter.  When they
            occur, the requests are not retried.
        </member>
        <member name="F:Smrf.SocialNetworkLib.Twitter.TwitterUtil.m_TwitterAccessToken">
            The Twitter access token to use.
        </member>
        <member name="F:Smrf.SocialNetworkLib.Twitter.TwitterUtil.m_TwitterAccessTokenSecret">
            The Twitter access token secret to use.
        </member>
        <member name="F:Smrf.SocialNetworkLib.Twitter.TwitterUtil.m_UserAgent">
            The user agent string to use.
        </member>
        <member name="F:Smrf.SocialNetworkLib.Twitter.TwitterUtil.m_TimeoutMs">
            Timeout to use, in milliseconds.
        </member>
        <member name="T:Smrf.AppLib.UrlUtil">
             <summary>
             Utility methods for working with URLs.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="F:Smrf.AppLib.UrlUtil.ExpandUrlTimeoutSeconds">
             Timeout for the <see cref="M:Smrf.AppLib.UrlUtil.ExpandUrl(System.String)"/> method, in seconds.
            
             Shortened URL services such as bit.ly are generally fast, so a long
             timeout isn't necessary.  If ExpandUrl() is given an URL that isn't
             shortened and the URL's page is slow, ExpandUrl() will time out and
             return the URL itself.  That is the correct behavior.
        </member>
        <member name="M:Smrf.AppLib.UrlUtil.EncodeUrlParameter(System.String)">
             <summary>
             Encodes an URL parameter by converting it to UTF-8 and then
             URL-encoding the UTF-8.
             </summary>
            
             <param name="urlParameter">
             The URL parameter to be encoded.  Can't be null.
             </param>
            
             <returns>
             The encoded parameter.
             </returns>
        </member>
        <member name="M:Smrf.AppLib.UrlUtil.ExpandUrl(System.String)">
             <summary>
             Expands an URL that might be a shortened URL.
             </summary>
            
             <param name="url">
             The URL to expand.  Can't be null or empty.  Sample:
             "http://bit.ly/urlwiki".
             </param>
            
             <returns>
             The expanded URL if <paramref name="url" /> is a shortened URL, or
             <paramref name="url" /> if it is not.  Sample:
             "http://en.wikipedia.org/wiki/URL_shortening".
             </returns>
            
             <remarks>
             This method checks for only one level of indirection.  If the URL has
             been shortened more than once, only the first expansion is performed.
            
             <para>
             If the URL cannot be reached for any reason, <paramref name="url" /> is
             returned.  This method catches all such exceptions.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.UrlUtil.ReplaceUrlsWithLinks(System.String)">
             <summary>
             Replaces each URL found in a string with a link.
             </summary>
            
             <param name="text">
             The string.
             </param>
            
             <returns>
             The string with replaced URLs.
             </returns>
        </member>
        <member name="M:Smrf.AppLib.UrlUtil.TryGetDomainFromUrl(System.String,System.String@)">
             <summary>
             Attempts to extract the domain from an URL, where "domain" is defined
             below.
             </summary>
            
             <param name="url">
             The URL.  Can't be null or empty.  Sample:
             "http://www.mail.yahoo.com/xyz?a=b".
             </param>
            
             <param name="domain">
             Where the domain gets stored if true is returned.  This includes the
             top-level domain and the first subdomain, but not any additional
             subdomains.  Sample: "yahoo.com".
             </param>
            
             <returns>
             true if successful, false if <paramref name="url"/> is not a valid URL.
             </returns>
        </member>
        <member name="M:Smrf.AppLib.UrlUtil.EscapeSpacesInUrl(System.String)">
             <summary>
             Escapes any illegal spaces found in an URL.
             </summary>
            
             <param name="url">
             The URL.
             </param>
            
             <returns>
             The URL with escaped spaces.
             </returns>
        </member>
        <member name="M:Smrf.AppLib.UrlUtil.MakeLocationAbsolute(System.String,System.String)">
             <summary>
             Makes the URL specified in a Location header absolute if it is
             relative.
             </summary>
            
             <param name="sLocation">
             The Location header in an HTTP redirect response.
             </param>
            
             <param name="sOriginalUrl">
             The original URL that resulted in the redirect response.
             </param>
            
             <returns>
             The Location if it's absolute; the Location appended to the base of the
             original URL if that is a legal URL; the original URL otherwise.
             </returns>
            
             <remarks>
             The Location header is supposed to be absolute, but browsers tolerate
             relative values.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.UrlUtil.HostIsIPAddress(System.String)">
             <summary>
             Determines whether the host part of an URL is a numerical IP address.
             </summary>
            
             <param name="host">
             The host part of an URL.  Can't be null or empty.  Sample:
             "www.mail.yahoo.com".
             </param>
            
             <returns>
             true if the host is a numerical IP address.
             </returns>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrApiKeyControl">
             <summary>
             UserControl that gets a Flickr API key.
             </summary>
            
             <remarks>
             Use the <see cref="P:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrApiKeyControl.ApiKey"/> property to set and get the API key.  Use
             <see cref="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrApiKeyControl.Validate"/> to validate the API key.
            
             <para>
             This control uses the following keyboard shortcut: F
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrApiKeyControl.RequestFlickrApiKeyUrl">
            Flickr Web page for requesting an API key.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrApiKeyControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrApiKeyControl"/>
            class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrApiKeyControl.Validate">
             <summary>
             Validates the user's entries.
             </summary>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the user's entries are invalid, an error message is displayed and
             false is returned.  Otherwise, true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrApiKeyControl.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrApiKeyControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrApiKeyControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrApiKeyControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrApiKeyControl.ApiKey">
             <summary>
             Gets or sets the Flickr API key.
             </summary>
            
             <value>
             The Flickr API key, as a String.  The default is String.Empty.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.LimitToNControl">
             <summary>
             UserControl for selecting a maximum number of objects to include.
             </summary>
            
             <remarks>
             The control contains a CheckBox and a NumericUpDown control.  If the
             checkbox is checked, the user can enter a value into the NumericUpDown
             control that is between 10 and <see cref="P:Smrf.NodeXL.GraphDataProviders.LimitToNControl.MaximumN"/>.  The value is
             available via the <see cref="P:Smrf.NodeXL.GraphDataProviders.LimitToNControl.N"/> property.
            
             <para>
             Unchecking the checkbox indicates "no limit," in which case the user cannot
             enter a value and <see cref="P:Smrf.NodeXL.GraphDataProviders.LimitToNControl.N"/> is always Int32.MaxValue.
             </para>
             
             <para>
             By default, the "objects" are people.  If the control is being used to
             select a maximum number of something besides people, set the <see cref="P:Smrf.NodeXL.GraphDataProviders.LimitToNControl.ObjectName"/> property.
             </para>
            
             <para>
             This control uses the following keyboard shortcut: T
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.LimitToNControl.MinimumN">
             <summary>
             The minimum value of the <see cref="P:Smrf.NodeXL.GraphDataProviders.LimitToNControl.N"/> property when N is not
             Int32.MaxValue.
             </summary>
            
             <remarks>
             This is a constant for now, because no callers need to change it.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.LimitToNControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.LimitToNControl"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.LimitToNControl.chkLimitToN_CheckedChanged(System.Object,System.EventArgs)">
             <summary>
             Handles the CheckedChanged event on the chkLimitToN CheckBox.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.LimitToNControl.nudN_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
             <summary>
             Handles the Validating event on the nudN NumericUpDown.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.LimitToNControl.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.LimitToNControl.m_iMaximumN">
            The maximum value of the N property when N is not Int32.MaxValue.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.LimitToNControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.LimitToNControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.LimitToNControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.LimitToNControl.N">
             <summary>
             Gets or sets the maximum number of objects to include.
             </summary>
            
             <value>
             The maximum number of objects to include, as an Int32.  Must be in the
             range <see cref="F:Smrf.NodeXL.GraphDataProviders.LimitToNControl.MinimumN"/> to <see cref="P:Smrf.NodeXL.GraphDataProviders.LimitToNControl.MaximumN"/>, or the
             value Int32.MaxValue for "no limit."  The default is Int32.MaxValue.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.LimitToNControl.MaximumN">
             <summary>
             Gets or sets the maximum value the user can enter.
             </summary>
            
             <value>
             The maximum value the user can enter.  The default is 9,999.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.LimitToNControl.ObjectName">
             <summary>
             Gets or sets the name of the objects being limited.
             </summary>
            
             <value>
             The name of the objects being limited.  The default is "people".
             </value>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.NetworkLevelControl">
             <summary>
             UserControl that contains a ComboBox for selecting a <see cref="T:Smrf.SocialNetworkLib.NetworkLevel"/> value, along with a PictureBox that shows a sample
             network for the selected level.
             </summary>
            
             <remarks>
             Use the <see cref="P:Smrf.NodeXL.GraphDataProviders.NetworkLevelControl.Level"/> property to set and get the network level.
            
             <para>
             This control uses a set of sample graph images included in the assembly as
             embedded resources.
             </para>
            
             <para>
             This control uses the following keyboard shortcuts: L
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.NetworkLevelControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.NetworkLevelControl"/>
            class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.NetworkLevelControl.cbxLevel_SelectedIndexChanged(System.Object,System.EventArgs)">
             <summary>
             Handles the SelectedIndexChanged event on the cbxLevel ComboBox.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.NetworkLevelControl.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.NetworkLevelControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.NetworkLevelControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.NetworkLevelControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.NetworkLevelControl.Level">
             <summary>
             Gets or sets the network level.
             </summary>
            
             <value>
             The network level, as a NetworkLevel.  Must be NetworkLevel.One,
             NetworkLevel.OnePointFive, or NetworkLevel.Two.  The default is
             NetworkLevel.One.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationControl">
             <summary>
             UserControl that shows a user's Twitter authorization status and provides
             some help links concerning whitelisting.
             </summary>
            
             <remarks>
             Get and set the user's Twitter authorization status with the <see cref="P:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationControl.Status"/> property.
            
             <para>
             This control uses the following keyboard shortcuts: I, V, W.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationControl"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationControl.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationControl.Status">
             <summary>
             Sets the user's Twitter authorization status.
             </summary>
            
             <value>
             The user's Twitter authorization status, as a <see cref="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationStatus"/>.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterRateLimitsControl">
            <summary>
            UserControl that includes a link that explains Twitter rate limits.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterRateLimitsControl.RateLimitingLinkText">
            Text for the lnkRateLimiting LinkLabel.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterRateLimitsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterRateLimitsControl"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterRateLimitsControl.lnkRateLimiting_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
             <summary>
             Handles the LinkClicked event on the lnkRateLimiting LinkLabel.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterRateLimitsControl.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterRateLimitsControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterRateLimitsControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterRateLimitsControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog">
             <summary>
             Gets the Flickr tags related to a tag specified by the user.
             </summary>
            
             <remarks>
             Call <see cref="M:System.Windows.Forms.Form.ShowDialog"/> to show the dialog.  If it returns
             DialogResult.OK, get the related tags from the <see cref="P:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.Results"/> property.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGraphDataProviderDialogBase">
            <summary>
            Base class for dialogs that get Flickr graph data.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase">
             <summary>
             Base class for dialogs that get graph data.
             </summary>
            
             <remarks>
             This class and its virtual methods should actually be declared abstract,
             but the Visual Studio designer doesn't allow dialog classes to have an
             abstract base class.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.#ctor(Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase"/> class.
             </summary>
            
             <param name="httpNetworkAnalyzer">
             Object that does most of the work.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.#ctor">
             <summary>
             Do not use this constructor.
             </summary>
            
             <remarks>
             Do not use this constructor.  It is for the Visual Studio designer
             only.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.DoDataExchange(System.Boolean)">
             <summary>
             Transfers data between the dialog's fields and its controls.
             </summary>
            
             <param name="bFromControls">
             true to transfer data from the dialog's controls to its fields, false
             for the other direction.
             </param>
            
             <returns>
             true if the transfer was successful.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.EnableControls">
            <summary>
            Enables or disables the dialog's controls.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.PreviewStartAnalysis">
             <summary>
             Performs tasks required before the analysis is started.
             </summary>
            
             <returns>
             true if the analysis should be started, false to stop.
             </returns>
            
             <remarks>
             The derived dialog should overload this method if it needs to perform
             tasks before analysis is started.  This base class implementation does
             nothing except return true.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.StartAnalysis">
             <summary>
             Starts the analysis.
             </summary>
            
             <remarks>
             It's assumed that DoDataExchange(true) was called and succeeded.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
             <summary>
             Handles the ProgressChanged event on the HttpNetworkAnalyzer.
             </summary>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.OnEmptyGraph">
            <summary>
            Handles the case where a graph was successfully obtained by is empty.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.OnAnalysisCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
             <summary>
             Handles the AnalysisCompleted event on the HttpNetworkAnalyzer object.
             </summary>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.OnAnalysisSuccess(System.Xml.XmlDocument)">
             <summary>
             Handles the AnalysisCompleted event on the HttpNetworkAnalyzer object
             when the analysis is successful.
             </summary>
            
             <param name="oGraphMLXmlDocument">
             XML document containing GraphML that represents a graph.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.OnAnalysisException(System.Exception)">
             <summary>
             Handles the AnalysisCompleted event on the NetworkAnalyzer object when
             an exception occurs.
             </summary>
            
             <param name="oException">
             The exception that occurred.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.OnOKClick">
            <summary>
            Handles the Click event on the btnOK button.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.OnClosed(System.EventArgs)">
             <summary>
             Handles the Closed event.
             </summary>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.HttpNetworkAnalyzer_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
             <summary>
             Handles the ProgressChanged event on the HttpNetworkAnalyzer object.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.HttpNetworkAnalyzer_AnalysisCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
             <summary>
             Handles the AnalysisCompleted event on the HttpNetworkAnalyzer object.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.m_oGraphMLXmlDocument">
            Dialog results, or null.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.m_oHttpNetworkAnalyzer">
            Object that does most of the work.
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.Results">
             <summary>
             Gets the dialog results.
             </summary>
            
             <value>
             The dialog results, as an XmlDocument containing GraphML.
             </value>
            
             <remarks>
             Read this property only if <see cref="M:System.Windows.Forms.Form.ShowDialog"/> returns
             DialogResult.OK.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.ToolStripStatusLabel">
             <summary>
             Gets the dialog's ToolStripStatusLabel control.
             </summary>
            
             <value>
             The dialog's ToolStripStatusLabel control, or null if the dialog
             doesn't have one.  The default is null.
             </value>
            
             <remarks>
             If the derived dialog overrides this property and returns a non-null
             ToolStripStatusLabel control, the control's text will automatically get
             updated when the HttpNetworkAnalyzer fires a ProgressChanged event.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGraphDataProviderDialogBase.#ctor(Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGraphDataProviderDialogBase"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGraphDataProviderDialogBase.#ctor">
             <summary>
             Do not use this constructor.
             </summary>
            
             <remarks>
             Do not use this constructor.  It is for the Visual Studio designer
             only.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGraphDataProviderDialogBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGraphDataProviderDialogBase.m_sApiKey">
            Flickr API key.  Can be empty but not null.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.RequestFlickrApiKeyUrl">
            Flickr Web page for requesting an API key.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.DoDataExchange(System.Boolean)">
             <summary>
             Transfers data between the dialog's fields and its controls.
             </summary>
            
             <param name="bFromControls">
             true to transfer data from the dialog's controls to its fields, false
             for the other direction.
             </param>
            
             <returns>
             true if the transfer was successful.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.StartAnalysis">
             <summary>
             Starts the Flickr analysis.
             </summary>
            
             <remarks>
             It's assumed that DoDataExchange(true) was called and succeeded.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.EnableControls">
            <summary>
            Enables or disables the dialog's controls.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.OnEmptyGraph">
            <summary>
            Handles the case where a graph was successfully obtained by is empty.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.btnOK_Click(System.Object,System.EventArgs)">
             <summary>
             Handles the Click event on the btnOK button.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.m_sTag">
            Tag to get the related tags for.  Can be empty but not null.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.m_eNetworkLevel">
            Network level to include.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.m_bIncludeSampleThumbnails">
            true to include a sample thumbnail for each tag.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetRelatedTagNetworkDialog.ToolStripStatusLabel">
             <summary>
             Gets the dialog's ToolStripStatusLabel control.
             </summary>
            
             <value>
             The dialog's ToolStripStatusLabel control, or null if the dialog
             doesn't have one.  The default is null.
             </value>
            
             <remarks>
             If the derived dialog overrides this property and returns a non-null
             ToolStripStatusLabel control, the control's text will automatically get
             updated when the HttpNetworkAnalyzer fires a ProgressChanged event.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog">
             <summary>
             Gets a network of Flickr users.
             </summary>
            
             <remarks>
             Call <see cref="M:System.Windows.Forms.Form.ShowDialog"/> to show the dialog.  If it returns
             DialogResult.OK, get the network from the <see cref="P:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.Results"/> property.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.DoDataExchange(System.Boolean)">
             <summary>
             Transfers data between the dialog's fields and its controls.
             </summary>
            
             <param name="bFromControls">
             true to transfer data from the dialog's controls to its fields, false
             for the other direction.
             </param>
            
             <returns>
             true if the transfer was successful.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.StartAnalysis">
             <summary>
             Starts the Flickr analysis.
             </summary>
            
             <remarks>
             It's assumed that DoDataExchange(true) was called and succeeded.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.EnableControls">
            <summary>
            Enables or disables the dialog's controls.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.OnEmptyGraph">
            <summary>
            Handles the case where a graph was successfully obtained by is empty.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.btnOK_Click(System.Object,System.EventArgs)">
             <summary>
             Handles the Click event on the btnOK button.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.m_sScreenName">
            The user name of the Flickr user whose network should be analyzed.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.m_bIncludeContactVertices">
            true to include a vertex for each of the user's contacts.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.m_bIncludeCommenterVertices">
            true to include a vertex for each user who has commented on the user's
            photos.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.m_bIncludeUserInformation">
            true to include information about each user.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.m_eNetworkLevel">
            Network level to include.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.m_iMaximumPeoplePerRequest">
            Maximum number of people to request for each query, or Int32.MaxValue
            for no limit.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrGetUserNetworkDialog.ToolStripStatusLabel">
             <summary>
             Gets the dialog's ToolStripStatusLabel control.
             </summary>
            
             <value>
             The dialog's ToolStripStatusLabel control, or null if the dialog
             doesn't have one.  The default is null.
             </value>
            
             <remarks>
             If the derived dialog overrides this property and returns a non-null
             ToolStripStatusLabel control, the control's text will automatically get
             updated when the HttpNetworkAnalyzer fires a ProgressChanged event.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog">
             <summary>
             Uses the NodeXL Graph Server to get a network of people who have tweeted
             a specified search term.
             </summary>
            
             <remarks>
             Call <see cref="M:System.Windows.Forms.Form.ShowDialog"/> to show the dialog.  If it returns
             DialogResult.OK, get the network from the <see cref="P:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.Results"/> property.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.DoDataExchange(System.Boolean)">
             <summary>
             Transfers data between the dialog's fields and its controls.
             </summary>
            
             <param name="bFromControls">
             true to transfer data from the dialog's controls to its fields, false
             for the other direction.
             </param>
            
             <returns>
             true if the transfer was successful.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.DoDataExchangeFromControls">
             <summary>
             Transfers data from the dialog's controls to its fields.
             </summary>
            
             <returns>
             true if the transfer was successful.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.DoDataExchangeToControls">
            <summary>
            Transfers data from the dialog's fields to its controls.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.StartAnalysis">
             <summary>
             Starts the analysis.
             </summary>
            
             <remarks>
             It's assumed that DoDataExchange(true) was called and succeeded.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.EnableControls">
            <summary>
            Enables or disables the dialog's controls.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.OnEmptyGraph">
            <summary>
            Handles the case where a graph was successfully obtained by is empty.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.AddDayToDate(System.DateTime)">
             <summary>
             Adds one day minus one second to a date.
             </summary>
            
             <param name="oDate">
             Date to add to.  The time component must be zero.
             </param>
            
             <returns>
             A copy of <paramref name="oDate" /> with one day minus one second added
             to it.
             </returns>
            
             <remarks>
             The dialog's DateTimePicker controls provide dates that have their time
             components set to zero.  This method sets the time component of the
             maximum date to 23:59:59.
            
             <para>
             If the user specifies a date range of 5/1/2013 through 5/2/2013, for
             example, the range to request from the Graph Server should be 5/1/2013
             at 00:00:00 through 5/2/2013 at 23:59:59.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.OnEventThatRequiresControlEnabling(System.Object,System.EventArgs)">
             <summary>
             Handles any event that should changed the enabled state of the dialog's
             controls.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.btnOK_Click(System.Object,System.EventArgs)">
             <summary>
             Handles the Click event on the btnOK button.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.m_sSearchTerm">
            The search term to use.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.m_bUseDateRange">
            true to use a date range, false to use a maximum number of statuses
            going backward in time.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.m_oStatusDate1Utc">
            First status date, in UTC.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.m_oStatusDate2Utc">
            Second status date, in UTC.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.m_iMaximumStatusesGoingBackward">
            Maximum number of statuses to get, going backward in time.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.m_bExpandStatusUrls">
            true to expand the URLs in each status.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.m_sGraphServerUserName">
            User name for the account to use on the NodeXL Graph Server.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.m_sGraphServerPassword">
            Password for the account to use on the NodeXL Graph Server.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerGetTwitterSearchNetworkDialog.ToolStripStatusLabel">
             <summary>
             Gets the dialog's ToolStripStatusLabel control.
             </summary>
            
             <value>
             The dialog's ToolStripStatusLabel control, or null if the dialog
             doesn't have one.  The default is null.
             </value>
            
             <remarks>
             If the derived dialog overrides this property and returns a non-null
             ToolStripStatusLabel control, the control's text will automatically get
             updated when the HttpNetworkAnalyzer fires a ProgressChanged event.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.PartialNetworkDialog">
             <summary>
             Asks the user whether he wants to import the partial network that was
             obtained.
             </summary>
            
             <remarks>
             When a <see cref="T:Smrf.NodeXL.GraphDataProviders.PartialNetworkException"/> is thrown, show this dialog.
             The dialog asks the user whether he wants to import the partial network
             that was obtained.  If he does, <see cref="M:System.Windows.Forms.Form.ShowDialog"/> returns
             DialogResult.Yes.  Otherwise, it returns DialogResult.No.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.PartialNetworkDialog.#ctor(Smrf.NodeXL.GraphDataProviders.PartialNetworkException,System.String)">
             <overloads>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.PartialNetworkDialog"/> class.
             </overloads>
            
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.PartialNetworkDialog"/> class with a <see cref="T:Smrf.NodeXL.GraphDataProviders.PartialNetworkException"/>.
             </summary>
            
             <param name="partialNetworkException">
             The <see cref="T:Smrf.NodeXL.GraphDataProviders.PartialNetworkException"/> that was thrown.
             </param>
            
             <param name="lastUnexpectedExceptionMessage">
             The most recent unexpected exception (after retries) that occurred
             while getting the network, converted to a message.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.PartialNetworkDialog.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.PartialNetworkDialog"/> class for the Visual Studio
             designer.
             </summary>
            
             <remarks>
             Do not use this constructor.  It is for use by the Visual Studio
             designer only.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.PartialNetworkDialog.lnkDetails_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
             <summary>
             Handles the LinkClicked event on the lnkDetails LinkLabel.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.PartialNetworkDialog.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.PartialNetworkDialog.m_oPartialNetworkException">
            The PartialNetworkException that was thrown.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.PartialNetworkDialog.m_sLastUnexpectedExceptionMessage">
            The most recent unexpected exception (after retries) that occurred
            while getting the network, converted to a message.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.PartialNetworkDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.PartialNetworkDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.PartialNetworkDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationManager">
             <summary>
             Manages the process of authorizing NodeXL with Twitter.
             </summary>
            
             <remarks>
             One of these objects is owned by the dialogs that import Twitter networks.
             The dialogs should call <see cref="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationManager.AuthorizeIfRequested"/> before the
             network importation starts.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationManager.#ctor(Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationControl)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationManager"/> class.
             </summary>
            
             <param name="twitterAuthorizationControl">
             The TwitterAuthorizationControl owned by the parent dialog.  This class
             manages the control's <see cref="P:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationControl.Status"/>
             property.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationManager.AuthorizeIfRequested">
             <summary>
             Authorizes NodeXL with Twitter if requested to do so.
             </summary>
            
             <returns>
             true if no authorization was requested, or if authorization succeeded.
             false if authorization was requested but failed.
             </returns>
            
             <exception cref="T:System.Net.WebException">
             Thrown if a problem occurs while requesting authorization.
             </exception>
            
             <remarks>
             If the <see cref="P:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationControl.Status"/> property on
             the TwitterAuthorizationControl owned by the parent dialog indicates
             that user wants to authorize with Twitter, this method runs the
             authorization process.  Otherwise, it does nothing.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationManager.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationManager.m_oTwitterAuthorizationControl">
            The TwitterAuthorizationControl owned by the parent dialog.
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizingDialog">
             <summary>
             Tells the user that the Twitter authorization page has been opened in a
             browser window, and accepts the PIN that Twitter provides after
             authorization is complete.
             </summary>
            
             <remarks>
             If <see cref="M:System.Windows.Forms.Form.ShowDialog"/> returns DialogResult.OK, get the PIN
             from the <see cref="P:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizingDialog.Pin"/> property.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizingDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizingDialog"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizingDialog.DoDataExchange(System.Boolean)">
             <summary>
             Transfers data between the dialog's fields and its controls.
             </summary>
            
             <param name="bFromControls">
             true to transfer data from the dialog's controls to its fields, false
             for the other direction.
             </param>
            
             <returns>
             true if the transfer was successful.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizingDialog.lnkPrivacy_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
             <summary>
             Handles the LinkClicked event on the lnkPrivacy LinkLabel.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizingDialog.btnOK_Click(System.Object,System.EventArgs)">
             <summary>
             Handles the Click event on the btnOK button.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizingDialog.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizingDialog.m_sPin">
            The PIN provided by Twitter.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizingDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizingDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizingDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizingDialog.Pin">
             <summary>
             Gets the PIN provided by Twitter.
             </summary>
            
             <value>
             The PIN provided by Twitter, as a String.
             </value>
            
             <remarks>
             Call this only if <see cref="M:System.Windows.Forms.Form.ShowDialog"/> returns
             DialogResult.OK.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog">
             <summary>
             Gets the the network of people who have tweeted a specified search term.
             </summary>
            
             <remarks>
             Call <see cref="M:System.Windows.Forms.Form.ShowDialog"/> to show the dialog.  If it returns
             DialogResult.OK, get the network from the <see cref="P:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.Results"/> property.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGraphDataProviderDialogBase">
             <summary>
             Base class for dialogs that get Twitter graph data.
             </summary>
            
             <remarks>
             The derived class must call the <see cref="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGraphDataProviderDialogBase.InitializeTwitterAuthorizationManager(Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationControl)"/> method.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGraphDataProviderDialogBase.#ctor(Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGraphDataProviderDialogBase"/> class.
             </summary>
            
             <param name="httpNetworkAnalyzer">
             Object that does most of the work.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGraphDataProviderDialogBase.#ctor">
             <summary>
             Do not use this constructor.
             </summary>
            
             <remarks>
             Do not use this constructor.  It is for the Visual Studio designer
             only.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGraphDataProviderDialogBase.InitializeTwitterAuthorizationManager(Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationControl)">
             <summary>
             Initializes the TwitterAuthorizationManager object.
             </summary>
            
             <param name="oTwitterAuthorizationControl">
             The TwitterAuthorizationControl owned by the parent dialog.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGraphDataProviderDialogBase.PreviewStartAnalysis">
             <summary>
             Performs tasks required before the analysis is started.
             </summary>
            
             <returns>
             true if the analysis should be started, false to stop.
             </returns>
            
             <remarks>
             The derived dialog should overload this method if it needs to perform
             tasks before analysis is started.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGraphDataProviderDialogBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGraphDataProviderDialogBase.m_oTwitterAuthorizationManager">
            Manages the process of authorizing NodeXL with Twitter, or null if
            InitializeTwitterAuthorizationManager() hasn't been called yet.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.SetHelpText">
            <summary>
            Sets the text in the dialog's HelpLinkLabels.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.DoDataExchange(System.Boolean)">
             <summary>
             Transfers data between the dialog's fields and its controls.
             </summary>
            
             <param name="bFromControls">
             true to transfer data from the dialog's controls to its fields, false
             for the other direction.
             </param>
            
             <returns>
             true if the transfer was successful.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.StartAnalysis">
             <summary>
             Starts the Twitter analysis.
             </summary>
            
             <remarks>
             It's assumed that DoDataExchange(true) was called and succeeded.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.EnableControls">
            <summary>
            Enables or disables the dialog's controls.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.TwitterGetSearchNetworkDialog_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
             <summary>
             Handles the KeyDown event on the TwitterGetSearchNetworkDialog.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.OnEventThatRequiresControlEnabling(System.Object,System.EventArgs)">
             <summary>
             Handles any event that should changed the enabled state of the dialog's
             controls.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.OnEmptyGraph">
            <summary>
            Handles the case where a graph was successfully obtained by is empty.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.OnEventThatRequiresImageChange(System.Object,System.EventArgs)">
             <summary>
             Handles any event that should change the image shown in the
             picNetworkPreview PictureBox.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.btnOK_Click(System.Object,System.EventArgs)">
             <summary>
             Handles the Click event on the btnOK button.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.m_sSearchTerm">
            The search term to use.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.m_bIncludeFriendEdges">
            true to include friend edges.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.m_iMaximumStatuses">
            Maximum number of tweets to request.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.m_bExpandStatusUrls">
            true to expand the URLs in each status.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetSearchNetworkDialog.ToolStripStatusLabel">
             <summary>
             Gets the dialog's ToolStripStatusLabel control.
             </summary>
            
             <value>
             The dialog's ToolStripStatusLabel control, or null if the dialog
             doesn't have one.  The default is null.
             </value>
            
             <remarks>
             If the derived dialog overrides this property and returns a non-null
             ToolStripStatusLabel control, the control's text will automatically get
             updated when the HttpNetworkAnalyzer fires a ProgressChanged event.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog">
             <summary>
             Gets a network that shows the connections between a set of Twitter users
             specified by either a Twitter List name or a set of Twitter screen names.
             </summary>
            
             <remarks>
             Call <see cref="M:System.Windows.Forms.Form.ShowDialog"/> to show the dialog.  If it returns
             DialogResult.OK, get the network from the <see cref="P:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.Results"/> property.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.MaximumScreenNames">
            Maximum number of screen names to allow.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.SetHelpText">
            <summary>
            Sets the text in the dialog's HelpLinkLabels.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.DoDataExchange(System.Boolean)">
             <summary>
             Transfers data between the dialog's fields and its controls.
             </summary>
            
             <param name="bFromControls">
             true to transfer data from the dialog's controls to its fields, false
             for the other direction.
             </param>
            
             <returns>
             true if the transfer was successful.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.ValidateListName(System.String@)">
             <summary>
             Validates the Twitter list name.
             </summary>
            
             <param name="sListName">
             Where the list name gets stored if true is returned.
             </param>
            
             <returns>
             true if the list name is valid.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.ValidateScreenNames(System.String@)">
             <summary>
             Validates the Twitter screen names.
             </summary>
            
             <param name="sScreenNames">
             Where the delimited screen names get stored if true is returned.
             </param>
            
             <returns>
             true if the screen names are valid.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.GetNetworkType">
             <summary>
             Gets the network type selected by the user.
             </summary>
            
             <returns>
             The network type selected by the user.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.SetNetworkType(Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.NetworkType)">
             <summary>
             Sets the network type controls.
             </summary>
            
             <param name="eNetworkType">
             The network type to set.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.StartAnalysis">
             <summary>
             Starts the Twitter analysis.
             </summary>
            
             <remarks>
             It's assumed that DoDataExchange(true) was called and succeeded.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.EnableControls">
            <summary>
            Enables or disables the dialog's controls.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.OnEventThatRequiresControlEnabling(System.Object,System.EventArgs)">
             <summary>
             Handles any event that should changed the enabled state of the dialog's
             controls.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.OnEmptyGraph">
            <summary>
            Handles the case where a graph was successfully obtained by is empty.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.OnEventThatRequiresImageChange(System.Object,System.EventArgs)">
             <summary>
             Handles any event that should change the image shown in the
             picNetworkPreview PictureBox.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.btnOK_Click(System.Object,System.EventArgs)">
             <summary>
             Handles the Click event on the btnOK button.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.m_bUseListName">
            true if the users were specified as a Twitter List name, false if they
            were specified as a set of screen names.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.m_sScreenNames">
            One or more Twitter screen names delimited with spaces, commas or
            newlines if m_bUseListName is false; unused otherwise.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.m_sListName">
            Twitter List name if m_bUseListName is true; unused otherwise.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.m_eNetworkType">
             Specifies the type of Twitter users network to get.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.m_bLimitToSpecifiedUsers">
            true if only the specified users should be included.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.m_iMaximumStatusesPerUser">
            Maximum number of recent statuses to request for each specified user.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.m_bExpandStatusUrls">
            true to expand the URLs in the statuses.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterGetUsersNetworkDialog.ToolStripStatusLabel">
             <summary>
             Gets the dialog's ToolStripStatusLabel control.
             </summary>
            
             <value>
             The dialog's ToolStripStatusLabel control, or null if the dialog
             doesn't have one.  The default is null.
             </value>
            
             <remarks>
             If the derived dialog overrides this property and returns a non-null
             ToolStripStatusLabel control, the control's text will automatically get
             updated when the HttpNetworkAnalyzer fires a ProgressChanged event.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog">
             <summary>
             Gets a network of YouTube users.
             </summary>
            
             <remarks>
             Call <see cref="M:System.Windows.Forms.Form.ShowDialog"/> to show the dialog.  If it returns
             DialogResult.OK, get the network from the <see cref="P:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.Results"/> property.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGraphDataProviderDialogBase">
            <summary>
            Base class for dialogs that get YouTube graph data.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGraphDataProviderDialogBase.#ctor(Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGraphDataProviderDialogBase"/> class.
             </summary>
            
             <param name="httpNetworkAnalyzer">
             Object that does most of the work.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGraphDataProviderDialogBase.#ctor">
             <summary>
             Do not use this constructor.
             </summary>
            
             <remarks>
             Do not use this constructor.  It is for the Visual Studio designer
             only.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGraphDataProviderDialogBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.DoDataExchange(System.Boolean)">
             <summary>
             Transfers data between the dialog's fields and its controls.
             </summary>
            
             <param name="bFromControls">
             true to transfer data from the dialog's controls to its fields, false
             for the other direction.
             </param>
            
             <returns>
             true if the transfer was successful.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.ValidateUserNameTextBox(System.Windows.Forms.TextBox,System.String@)">
             <summary>
             Validates a TextBox that must contain a valid YouTube user name.
             </summary>
            
             <param name="oTextBox">
             TextBox to validate.
             </param>
            
             <param name="sUserName">
             Where the trimmed user name gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.StartAnalysis">
             <summary>
             Starts the YouTube analysis.
             </summary>
            
             <remarks>
             It's assumed that DoDataExchange(true) was called and succeeded.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.EnableControls">
            <summary>
            Enables or disables the dialog's controls.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.OnEmptyGraph">
            <summary>
            Handles the case where a graph was successfully obtained by is empty.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.btnOK_Click(System.Object,System.EventArgs)">
             <summary>
             Handles the Click event on the btnOK button.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.m_sUserName">
            The user name of the YouTube user whose network should be analyzed.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.m_bIncludeFriendVertices">
            true to include a vertex for each of the user's friends.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.m_bIncludeSubscriptionVertices">
            true to include a vertex for each person subscribed to by the user.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.m_eNetworkLevel">
            Network level to include.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.m_bIncludeAllStatistics">
            true to include all statistics for each user.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.m_iMaximumPeoplePerRequest">
            Maximum number of people to request for each query, or Int32.MaxValue
            for no limit.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetUserNetworkDialog.ToolStripStatusLabel">
             <summary>
             Gets the dialog's ToolStripStatusLabel control.
             </summary>
            
             <value>
             The dialog's ToolStripStatusLabel control, or null if the dialog
             doesn't have one.  The default is null.
             </value>
            
             <remarks>
             If the derived dialog overrides this property and returns a non-null
             ToolStripStatusLabel control, the control's text will automatically get
             updated when the HttpNetworkAnalyzer fires a ProgressChanged event.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog">
             <summary>
             Gets a network of related YouTube videos.
             </summary>
            
             <remarks>
             Call <see cref="M:System.Windows.Forms.Form.ShowDialog"/> to show the dialog.  If it returns
             DialogResult.OK, get the network from the <see cref="P:Smrf.NodeXL.GraphDataProviders.GraphDataProviderDialogBase.Results"/> property.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.DoDataExchange(System.Boolean)">
             <summary>
             Transfers data between the dialog's fields and its controls.
             </summary>
            
             <param name="bFromControls">
             true to transfer data from the dialog's controls to its fields, false
             for the other direction.
             </param>
            
             <returns>
             true if the transfer was successful.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.StartAnalysis">
             <summary>
             Starts the analysis.
             </summary>
            
             <remarks>
             It's assumed that DoDataExchange(true) was called and succeeded.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.EnableControls">
            <summary>
            Enables or disables the dialog's controls.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.OnEmptyGraph">
            <summary>
            Handles the case where a graph was successfully obtained by is empty.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.btnOK_Click(System.Object,System.EventArgs)">
             <summary>
             Handles the Click event on the btnOK button.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.m_sSearchTerm">
            The search term to use.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.m_bIncludeSharedCommenterEdges">
            true to include an edge for each pair of videos commented on by the
            same person.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.m_bIncludeSharedCategoryEdges">
            true to include an edge for each pair of videos that share the same
            category.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.m_bIncludeSharedVideoResponderEdges">
            true to include an edge for each pair of videos for which the same
            person responded with a video.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.m_iMaximumVideos">
            Maximum number of videos to request, or Int32.MaxValue for no limit.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeGetVideoNetworkDialog.ToolStripStatusLabel">
             <summary>
             Gets the dialog's ToolStripStatusLabel control.
             </summary>
            
             <value>
             The dialog's ToolStripStatusLabel control, or null if the dialog
             doesn't have one.  The default is null.
             </value>
            
             <remarks>
             If the derived dialog overrides this property and returns a non-null
             ToolStripStatusLabel control, the control's text will automatically get
             updated when the HttpNetworkAnalyzer fires a ProgressChanged event.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkGraphDataProvider">
             <summary>
             Gets the network of tags related to a specified tag.
             </summary>
            
             <remarks>
             Call <see cref="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.TryGetGraphDataAsTemporaryFile(System.String@)"/> to
             get the network as a temporary GraphML file.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase">
            <summary>
            Base class for graph data providers.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase"/>
             class.
             </summary>
            
             <param name="name">
             The name of the data provider.
             </param>
            
             <param name="description">
             A description of the data provider.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.TryGetGraphDataAsTemporaryFile(System.String@)">
             <summary>
             Attempts to get graph data to import into the NodeXL Excel Template.
             </summary>
            
             <param name="pathToTemporaryFile">
             If true is returned, this gets set to the full path of a temporary file
             created by this method.  The method's caller will read the temporary
             file and then delete it.
             </param>
            
             <returns>
             true if the graph data was obtained and stored in a temporary file
             created by this method, false if the graph data was not obtained.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.CreateDialog">
             <summary>
             Creates a dialog for getting graph data.
             </summary>
            
             <returns>
             A dialog derived from GraphDataProviderDialogBase.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.m_sName">
            The name of the data provider.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.m_sDescription">
            A description of the data provider.
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.Name">
             <summary>
             Gets the name of the data provider.
             </summary>
            
             <value>
             See the <see cref="T:Microsoft.NodeXL.ExcelTemplatePlugIns.IGraphDataProvider"/> topic for details.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.Description">
             <summary>
             Gets a description of the data provider.
             </summary>
            
             <value>
             See the <see cref="T:Microsoft.NodeXL.ExcelTemplatePlugIns.IGraphDataProvider"/> topic for details.
             </value>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkGraphDataProvider.GraphDataProviderName">
            Value of the Name property.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkGraphDataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkGraphDataProvider"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkGraphDataProvider.CreateDialog">
             <summary>
             Creates a dialog for getting graph data.
             </summary>
            
             <returns>
             A dialog derived from GraphDataProviderDialogBase.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkGraphDataProvider.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkGraphDataProvider">
             <summary>
             Gets a network of people related to a Flickr user.
             </summary>
            
             <remarks>
             Call <see cref="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.TryGetGraphDataAsTemporaryFile(System.String@)"/> to
             get the network as a temporary GraphML file.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkGraphDataProvider.GraphDataProviderName">
            Value of the Name property.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkGraphDataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkGraphDataProvider"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkGraphDataProvider.CreateDialog">
             <summary>
             Creates a dialog for getting graph data.
             </summary>
            
             <returns>
             A dialog derived from GraphDataProviderDialogBase.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkGraphDataProvider.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkGraphDataProvider">
             <summary>
             Uses the NodeXL Graph Server to get a network created from a specified set
             of tweets.
             </summary>
            
             <remarks>
             Call <see cref="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.TryGetGraphDataAsTemporaryFile(System.String@)"/> to
             get the network as a temporary GraphML file.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkGraphDataProvider.GraphDataProviderName">
            Value of the Name property.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkGraphDataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkGraphDataProvider"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkGraphDataProvider.CreateDialog">
             <summary>
             Creates a dialog for getting graph data.
             </summary>
            
             <returns>
             A dialog derived from GraphDataProviderDialogBase.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkGraphDataProvider.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkGraphDataProvider">
             <summary>
             Gets the network of people who have tweeted a specified search term.
             </summary>
            
             <remarks>
             Call <see cref="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.TryGetGraphDataAsTemporaryFile(System.String@)"/> to
             get the network as a temporary GraphML file.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkGraphDataProvider.GraphDataProviderName">
            Value of the Name property.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkGraphDataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkGraphDataProvider"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkGraphDataProvider.CreateDialog">
             <summary>
             Creates a dialog for getting graph data.
             </summary>
            
             <returns>
             A dialog derived from GraphDataProviderDialogBase.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkGraphDataProvider.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkGraphDataProvider">
             <summary>
             Gets a network that shows the connections between a set of Twitter users
             specified by either a Twitter List name or a set of Twitter screen names.
             </summary>
            
             <remarks>
             Call <see cref="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.TryGetGraphDataAsTemporaryFile(System.String@)"/> to
             get the network as a temporary GraphML file.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkGraphDataProvider.GraphDataProviderName">
            Value of the Name property.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkGraphDataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkGraphDataProvider"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkGraphDataProvider.CreateDialog">
             <summary>
             Creates a dialog for getting graph data.
             </summary>
            
             <returns>
             A dialog derived from GraphDataProviderDialogBase.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkGraphDataProvider.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkGraphDataProvider">
             <summary>
             Gets a network of people related to a YouTube user.
             </summary>
            
             <remarks>
             Call <see cref="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.TryGetGraphDataAsTemporaryFile(System.String@)"/> to
             get the network as a temporary GraphML file.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkGraphDataProvider.GraphDataProviderName">
            Value of the Name property.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkGraphDataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkGraphDataProvider"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkGraphDataProvider.CreateDialog">
             <summary>
             Creates a dialog for getting graph data.
             </summary>
            
             <returns>
             A dialog derived from GraphDataProviderDialogBase.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkGraphDataProvider.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkGraphDataProvider">
             <summary>
             Gets a network of related YouTube videos.
             </summary>
            
             <remarks>
             Call <see cref="M:Smrf.NodeXL.GraphDataProviders.GraphDataProviderBase.TryGetGraphDataAsTemporaryFile(System.String@)"/> to
             get the network as a temporary GraphML file.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkGraphDataProvider.GraphDataProviderName">
            Value of the Name property.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkGraphDataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkGraphDataProvider"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkGraphDataProvider.CreateDialog">
             <summary>
             Creates a dialog for getting graph data.
             </summary>
            
             <returns>
             A dialog derived from GraphDataProviderDialogBase.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkGraphDataProvider.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.CancellationPendingException">
             <summary>
             Represents an exception thrown when a pending cancellation has been
             detected while an asynchronous network analysis is in progress.
             </summary>
            
             <remarks>
             This exception gets thrown by <see cref="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.CheckCancellationPending"/> when it detects
             a pending cancellation.  The asynchronous method analyzing the network
             should catch this exception, set the DoWorkEventArgs.Cancel property to
             true, and then return.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.CancellationPendingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.CancellationPendingException"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.CancellationPendingException.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.PartialNetworkException">
             <summary>
             Represents an exception thrown when only part of a requested network is
             obtained.
             </summary>
            
             <remarks>
             Network analyzer classes may throw an exception of this type when only part
             of a requested network was obtained due to the occurrence of one or more
             errors.  The caller may choose to use the partial network, which is
             available via the <see cref="P:Smrf.NodeXL.GraphDataProviders.PartialNetworkException.PartialNetwork"/> property.  Information
             about the requests that were made is available via the <see cref="P:Smrf.NodeXL.GraphDataProviders.PartialNetworkException.RequestStatistics"/> property.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.PartialNetworkException.#ctor(System.Xml.XmlDocument,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.PartialNetworkException"/> class.
             </summary>
            
             <param name="partialNetwork">
             The partial network that was obtained.
             </param>
            
             <param name="requestStatistics">
             Information about the requests that were made while getting the
             network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.PartialNetworkException.ToMessage(System.String)">
             <summary>
             Converts the exception to a message suitable for use in a user
             interface.
             </summary>
            
             <param name="lastUnexpectedExceptionMessage">
             The most recent unexpected exception (after retries) that occurred
             while getting the network, converted to a message by the caller.  The
             most recent unexpected exception can be obtained from <see cref="P:Smrf.NodeXL.GraphDataProviders.PartialNetworkException.RequestStatistics"/>.LastUnexpectedException.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.PartialNetworkException.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.PartialNetworkException.m_oPartialNetwork">
            The partial network that was obtained.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.PartialNetworkException.m_oRequestStatistics">
            Information about the requests that were made while getting the
            network.
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.PartialNetworkException.PartialNetwork">
             <summary>
             The partial network that was obtained.
             </summary>
            
             <value>
             The partial network, as an XmlDocument containing the partial network
             as GraphML.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.PartialNetworkException.RequestStatistics">
             <summary>
             Gets information about the requests that were made while getting the
             network.
             </summary>
            
             <value>
             Information about the requests that were made while getting the
             network.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrException">
             <summary>
             Represents an error message received from Flickr.
             </summary>
            
             <remarks>
             A <see cref="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrException"/> is thrown when a valid XML response is
             received from Flickr and the XML indicates that an error has occurred.
             This differs from a WebException, which is thrown when an HTTP error occurs
             and there is no XML response.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrException"/> class.
             </summary>
            
             <param name="flickrErrorMessage">
             Error message received from Flickr.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrException.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase">
            <summary>
            Base class for classes that analyze a Flickr network.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase">
             <summary>
             Abstract base class for classes that analyze network information obtained
             via HTTP Web requests.
             </summary>
            
             <remarks>
             This base class implements properties related to HTTP Web requests, a
             BackgroundWorker instance, and properties, methods, and events related to
             the BackgroundWorker.  The derived class must implement a method to start
             an analysis and implement the <see cref="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)"/>
             method.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.UserAgent">
            User agent to use for all Web requests.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.HttpWebRequestTimeoutMs">
            The timeout to use for HTTP Web requests, in milliseconds.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.CancelAsync">
             <summary>
             Cancels the analysis started by an async method.
             </summary>
            
             <remarks>
             When the analysis cancels, the <see cref="E:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.AnalysisCompleted"/> event
             fires.  The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> property
             will be true.
            
             <para>
             Important note: If the background thread started by an async method
             is running a Web request when <see cref="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.CancelAsync"/> is called, the
             cancel won't occur until the request completes.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.ExceptionToMessage(System.Exception)">
             <summary>
             Converts an exception to an error message appropriate for a user
             interface.
             </summary>
            
             <param name="oException">
             The exception that occurred.
             </param>
            
             <returns>
             An error message appropriate for a user interface.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.CheckIsBusy(System.String)">
             <summary>
             Throws an exception if an asynchronous operation is in progress.
             </summary>
            
             <param name="sMethodName">
             Name of the calling method.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.GetXmlDocumentWithRetries(System.String,System.Net.HttpStatusCode[],Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Gets an XML document given an URL.  Retries after an error.
             </summary>
            
             <param name="sUrl">
             URL to use.
             </param>
            
             <param name="aeHttpStatusCodesToFailImmediately">
             An array of status codes that should be failed immediately, or null to
             retry all failures.  An example is HttpStatusCode.Unauthorized (401),
             which Twitter returns when information about a user who has "protected"
             status is requested.  This should not be retried, because the retries
             would produce exactly the same error response.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <returns>
             The XmlDocument.
             </returns>
            
             <remarks>
             If the request fails and the HTTP status code is not one of the codes
             specified in <paramref name="aeHttpStatusCodesToFailImmediately"/>,
             the request is retried.  If the retries also fail, an exception is
             thrown.
            
             <para>
             If the request fails with one of the HTTP status code contained in
             <paramref name="aeHttpStatusCodesToFailImmediately"/>, an exception is
             thrown immediately.
             </para>
            
             <para>
             In either case, it is always up to the caller to handle the exceptions.
             This method never ignores an exception; it either retries it and throws
             it if all retries fail, or throws it immediately.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.AppendStringGraphMLAttributeValue(System.Xml.XmlNode,System.String,System.Xml.XmlNamespaceManager,Smrf.XmlLib.GraphMLXmlDocument,System.Xml.XmlNode,System.String)">
             <summary>
             Appends a String GraphML-Attribute value to an edge or vertex XML node. 
             </summary>
            
             <param name="oXmlNodeToSelectFrom">
             Node to select from.
             </param>
             
             <param name="sXPath">
             XPath expression to a String descendant of <paramref
             name="oXmlNodeToSelectFrom" />.
             </param>
            
             <param name="oXmlNamespaceManager">
             NamespaceManager to use, or null to not use one.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oEdgeOrVertexXmlNode">
             The edge or vertex XML node from <paramref
             name="oGraphMLXmlDocument" /> to add the GraphML attribute value to.
             </param>
            
             <param name="sGraphMLAttributeID">
             GraphML ID of the attribute.
             </param>
            
             <returns>
             true if the GraphML-Attribute was appended.
             </returns>
            
             <remarks>
             This method selects from <paramref name="oXmlNodeToSelectFrom" /> using
             the <paramref name="sXPath" /> expression.  If the selection is
             successful, the specified String value gets stored on <paramref
             name="oEdgeOrVertexXmlNode" /> as a Graph-ML Attribute.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.AppendInt32GraphMLAttributeValue(System.Xml.XmlNode,System.String,System.Xml.XmlNamespaceManager,Smrf.XmlLib.GraphMLXmlDocument,System.Xml.XmlNode,System.String)">
             <summary>
             Appends an Int32 GraphML-Attribute value to an edge or vertex XML node. 
             </summary>
            
             <param name="oXmlNodeToSelectFrom">
             Node to select from.
             </param>
             
             <param name="sXPath">
             XPath expression to an Int32 descendant of <paramref
             name="oXmlNodeToSelectFrom" />.
             </param>
            
             <param name="oXmlNamespaceManager">
             NamespaceManager to use, or null to not use one.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oEdgeOrVertexXmlNode">
             The edge or vertex XML node from <paramref
             name="oGraphMLXmlDocument" /> to add the GraphML attribute value to.
             </param>
            
             <param name="sGraphMLAttributeID">
             GraphML ID of the attribute.
             </param>
            
             <returns>
             true if the GraphML-Attribute was appended.
             </returns>
            
             <remarks>
             This method selects from <paramref name="oXmlNodeToSelectFrom" /> using
             the <paramref name="sXPath" /> expression.  If the selection is
             successful, the specified Int32 value gets stored on <paramref
             name="oEdgeOrVertexXmlNode" /> as a Graph-ML Attribute.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.AppendDoubleGraphMLAttributeValue(System.Xml.XmlNode,System.String,System.Xml.XmlNamespaceManager,Smrf.XmlLib.GraphMLXmlDocument,System.Xml.XmlNode,System.String)">
             <summary>
             Appends a Double GraphML-Attribute value to an edge or vertex XML node. 
             </summary>
            
             <param name="oXmlNodeToSelectFrom">
             Node to select from.
             </param>
             
             <param name="sXPath">
             XPath expression to a Double descendant of <paramref
             name="oXmlNodeToSelectFrom" />.
             </param>
            
             <param name="oXmlNamespaceManager">
             NamespaceManager to use, or null to not use one.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oEdgeOrVertexXmlNode">
             The edge or vertex XML node from <paramref
             name="oGraphMLXmlDocument" /> to add the GraphML attribute value to.
             </param>
            
             <param name="sGraphMLAttributeID">
             GraphML ID of the attribute.
             </param>
            
             <returns>
             true if the GraphML-Attribute was appended.
             </returns>
            
             <remarks>
             This method selects from <paramref name="oXmlNodeToSelectFrom" /> using
             the <paramref name="sXPath" /> expression.  If the selection is
             successful, the specified Double value gets stored on <paramref
             name="oEdgeOrVertexXmlNode" /> as a Graph-ML Attribute.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.NetworkLevelToString(Smrf.SocialNetworkLib.NetworkLevel)">
             <summary>
             Converts a <see cref="T:Smrf.SocialNetworkLib.NetworkLevel"/> value to a string suitable for
             use in a network description.
             </summary>
            
             <param name="eNetworkLevel">
             The <see cref="T:Smrf.SocialNetworkLib.NetworkLevel"/> value to convert to a string.  Sample:
             NetworkLevel.OnePointFive.
             </param>
            
             <returns>
             A string suitable for use in a network description.  Sample:
             "1.5-level".
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.ReportProgress(System.String)">
             <summary>
             Reports progress.
             </summary>
            
             <param name="sProgressMessage">
             Progress message.  Can be empty but not null.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.GetNeedToRecurse(Smrf.SocialNetworkLib.NetworkLevel,System.Int32)">
             <summary>
             Determines whether a method getting a recursive network needs to
             recurse.
             </summary>
            
             <param name="eNetworkLevel">
             Network level to include.  Must be NetworkLevel.One, OnePointFive, or
             Two.
             </param>
            
             <param name="iRecursionLevel">
             Recursion level for the current call.  Must be 1 or 2.
             </param>
            
             <returns>
             true if the caller needs to recurse.
             </returns>
            
             <remarks>
             This is meant for network analyzers that analyze a recursive network.
             Call this from the method that uses recursion to get the different
             network levels, and use the return value to determine whether to
             recurse.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.GetNeedToAppendVertices(Smrf.SocialNetworkLib.NetworkLevel,System.Int32)">
             <summary>
             Determines whether a method getting a recursive network needs to
             add vertices for a specified network and recursion level.
             </summary>
            
             <param name="eNetworkLevel">
             Network level to include.  Must be NetworkLevel.One, OnePointFive, or
             Two.
             </param>
            
             <param name="iRecursionLevel">
             Recursion level for the current call.  Must be 1 or 2.
             </param>
            
             <returns>
             true if the caller needs to add vertices for the specified network and
             recursion levels.
             </returns>
            
             <remarks>
             This is meant for network analyzers that analyze a recursive network.
             Call this from the method that uses recursion to get the different
             network levels, and use the return value to determine whether to add
             vertices for the current network and recursion levels.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.CheckCancellationPending">
             <summary>
             Checks whether a cancellation is pending.
             </summary>
            
             <remarks>
             If an asynchronous operation is in progress and a cancellation is
             pending, this method throws a <see cref="T:Smrf.NodeXL.GraphDataProviders.CancellationPendingException"/>.  When the asynchronous method
             catches this exception, it should set the DoWorkEventArgs.Cancel
             property to true and then return.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.FireProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
             <summary>
             Fires the ProgressChanged event if appropriate.
             </summary>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.OnNetworkObtained(System.Xml.XmlDocument,Smrf.SocialNetworkLib.RequestStatistics,System.String,System.String,System.String)">
             <summary>
             Call this after part or all of the network has been obtained.
             </summary>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="sNetworkDescription">
             A description of the network.
             </param>
            
             <param name="sNetworkTitle">
             A title for the network.
             </param>
            
             <param name="sPartialFileName">
             A string that will be used as part of the suggested file name for the
             network.  Sample: "Twitter Search usfca".  The actual file name in this
             case (without an extension) will be "2014-04-14 21-23-22 NodeXL Twitter
             Search usfca".
             </param>
            
             <remarks>
             This method adds <paramref name="sNetworkDescription"/> to the
             <paramref name="oGraphMLXmlDocument"/>.  Then, if the entire network
             has been obtained, it simply returns.  Otherwise, it throws a 
             PartialNetworkException.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.OnUnexpectedException(System.Exception,System.Xml.XmlDocument,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Handles an exception that unexpectedly terminated the process of
             getting the network.
             </summary>
            
             <param name="oException">
             The exception that occurred.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument being populated.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <remarks>
             This should be called only when an unexpected exception occurs,
             retrying the request doesn't fix it, and the process must be
             terminated.
            
             <para>
             If the user cancelled or none of the network was obtained, this method
             just rethrows the exception.  Otherwise, it adds the exception to
             <paramref name="oRequestStatistics"/>, and the caller should call
             <see cref="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.OnNetworkObtained(System.Xml.XmlDocument,Smrf.SocialNetworkLib.RequestStatistics,System.String,System.String,System.String)"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Handles the DoWork event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Source of the event.
             </param>
            
             <param name="e">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.BackgroundWorker_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
             <summary>
             Handles the ProgressChanged event on the BackgroundWorker.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.BackgroundWorker_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
             <summary>
             Handles the RunWorkerCompleted event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Source of the event.
             </param>
            
             <param name="e">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.m_oBackgroundWorker">
            Used for asynchronous analysis.
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.IsBusy">
             <summary>
             Gets a flag indicating whether an asynchronous operation is in
             progress.
             </summary>
            
             <value>
             true if an asynchronous operation is in progress.
             </value>
        </member>
        <member name="E:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.ProgressChanged">
            <summary>
            Occurs when progress is reported.
            </summary>
        </member>
        <member name="E:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.AnalysisCompleted">
            <summary>
            Occurs when the analysis started by an async method completes, is
            cancelled, or encounters an error.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.ClassName">
             <summary>
             Gets the full name of this class.
             </summary>
            
             <value>
             The full name of this class, suitable for use in error messages.
             </value>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase.NetworkSource">
            The source of Flickr networks, used in network descriptions.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase.ExceptionToMessage(System.Exception)">
             <summary>
             Converts an exception to an error message appropriate for a user
             interface.
             </summary>
            
             <param name="oException">
             The exception that occurred.
             </param>
            
             <returns>
             An error message appropriate for a user interface.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase.GetFlickrMethodUrl(System.String,System.String,System.String)">
             <summary>
             Constructs an URL for a Flickr API method.
             </summary>
            
             <param name="sFlickrMethodName">
             Flickr method name.  Sample: "flickr.test.echo".
             </param>
            
             <param name="sApiKey">
             Flickr API key.
             </param>
            
             <param name="sAdditionalParameters">
             Optional additional URL parameters, or null for none.  If not null,
             must start with an ampersand and must already be URL-encoded.
             </param>
            
             <returns>
             An URL for the specified Flickr method.
             URL parameters.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase.GetUserIDUrlParameter(System.String)">
             <summary>
             Gets an URL parameter for a Flickr user ID.
             </summary>
            
             <param name="sUserID">
             Flickr user ID.
             </param>
            
             <returns>
             URL parameter, including a leading ampersand.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase.TryGetXmlDocument(System.String,Smrf.SocialNetworkLib.RequestStatistics,System.Xml.XmlDocument@)">
             <summary>
             Attempts to get an XML document from an URL.
             </summary>
            
             <param name="sUrl">
             The URL to get the document from.  Can include URL parameters.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oXmlDocument">
             Where the XmlDocument gets stored if true is returned.
             </param>
            
             <returns>
             true if the XmlDocument was obtained, false if an error occurred.
             </returns>
            
             <remarks>
             If an error occurs, false is returned.  A WebException or XmlException
             is never rethrown.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase.GetXmlDocument(System.String,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Gets an XML document from an URL.
             </summary>
            
             <param name="sUrl">
             The URL to get the document from.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <returns>
             The XmlDocument from the URL.
             </returns>
            
             <remarks>
             If an error occurs, whether it's a WebException or an error document
             returned by Flickr, an exception is thrown.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase.EnumerateXmlNodes(System.String,System.String,System.Int32,System.Boolean,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Get an XmlDocument from an URL, then enumerates a specified set of
             child nodes.
             </summary>
            
             <param name="sUrl">
             The URL to get the document from.  Can include URL parameters.
             </param>
            
             <param name="sXPath">
             The XPath of the child nodes to enumerate.  Sample:
             "feed/entry".
             </param>
            
             <param name="iMaximumXmlNodes">
             Maximum number of child nodes to return, or Int32.MaxValue for no
             limit.
             </param>
            
             <param name="bSkipMostPage1Errors">
             If true, most page-1 errors are skipped over.  If false, they are
             rethrown.  (Errors that occur on page 2 and above are always skipped.)
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <remarks>
             This should be used only for Flickr methods that use paged results.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase.FlickrScreenNameToUserID(System.String,System.String,Smrf.SocialNetworkLib.RequestStatistics,System.String@,System.String@)">
             <summary>
             Gets the user ID for a Flickr screen name.
             </summary>
            
             <param name="sScreenNameAnyCase">
             Flickr screen name, with any combination of upper- and lower-case
             characters.  Sample: "barbsmith".
             </param>
            
             <param name="sApiKey">
             Flickr API key.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="sUserID">
             Where the user ID for the specified screen name gets stored.
             </param>
            
             <param name="sScreenNameCorrectCase">
             Where the screen name gets stored, with the correct combination of
             upper- and lower-case characters.  Sample: "BarbSmith".
             </param>
            
             <remarks>
             If there is no such user, a FlickrException is thrown.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase.HttpStatusCodesToFailImmediately">
            HTTP status codes that have special meaning with Flickr.  When they
            occur, the requests are not retried.
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase.GetNetworkAsyncArgsBase">
            <summary>
            Base class for classes that contain the arguments needed to
            asynchronously get a Flickr network.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrNetworkAnalyzerBase.GetNetworkAsyncArgsBase.ApiKey">
            
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer">
             <summary>
             Gets a network of related Flickr tags.
             </summary>
            
             <remarks>
             Use <see cref="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.GetNetworkAsync(System.String,Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.String)"/> to asynchronously get an undirected
             network of Flickr tags that are related to a specified tag.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.GetNetworkAsync(System.String,Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.String)">
             <summary>
             Asynchronously gets an undirected network of Flickr tags related to a
             specified tag.
             </summary>
            
             <param name="tag">
             Tag to get related tags for.
             </param>
            
             <param name="whatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="networkLevel">
             Network level to include.
             </param>
            
             <param name="apiKey">
             Flickr API key.
             </param>
            
             <remarks>
             When the analysis completes, the <see cref="E:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.AnalysisCompleted"/> event fires.  The
             <see cref="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result"/> property will return
             an XmlDocument containing the network as GraphML.
            
             <para>
             To cancel the analysis, call <see cref="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.CancelAsync"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.GetRelatedTagsInternal(System.String,Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.String)">
             <overloads>
             Gets the Flickr tags related to a specified tag.
             </overloads>
            
             <summary>
             Gets the Flickr tags related to a specified tag.
             </summary>
            
             <param name="sTag">
             Tag to get related tags for.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="eNetworkLevel">
             Network level to include.  Must be NetworkLevel.One, OnePointFive, or
             Two.
             </param>
            
             <param name="sApiKey">
             Flickr API key.
             </param>
            
             <returns>
             An XmlDocument containing the network as GraphML.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.GetRelatedTagsInternal(System.String,Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.String,Smrf.SocialNetworkLib.RequestStatistics,Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Gets the Flickr tags related to a specified tag, given a
             GraphXMLXmlDocument.
             </summary>
            
             <param name="sTag">
             Tag to get related tags for.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="eNetworkLevel">
             Network level to include.  Must be NetworkLevel.One, OnePointFive, or
             Two.
             </param>
            
             <param name="sApiKey">
             Flickr API key.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument to populate with the requested network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.GetRelatedTagsRecursive(System.String,Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.String,System.Int32,Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.Dictionary{System.String,System.Xml.XmlNode},Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Recursively gets a tag's related tags.
             </summary>
            
             <param name="sTag">
             Tag to get related tags for.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="eNetworkLevel">
             Network level to include.  Must be NetworkLevel.One, OnePointFive, or
             Two.
             </param>
            
             <param name="sApiKey">
             Flickr API key.
             </param>
            
             <param name="iRecursionLevel">
             Recursion level for this call.  Must be 1 or 2.  Gets incremented when
             recursing.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oTagDictionary">
             The key is the tag name and the value is the corresponding GraphML XML
             node that represents the tag.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.AppendSampleThumbnails(System.Collections.Generic.Dictionary{System.String,System.Xml.XmlNode},Smrf.XmlLib.GraphMLXmlDocument,System.String,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Appends sample thumbnails to the GraphMLXmlDocument being populated.
             </summary>
            
             <param name="oTagDictionary">
             The key is the tag name and the value is the corresponding GraphML XML
             node that represents the tag.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="sApiKey">
             Flickr API key.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.TryGetSampleImageUrl(System.String,System.String,Smrf.SocialNetworkLib.RequestStatistics,System.String@)">
             <summary>
             Attempts to get an URL to a sample image for a tag.
             </summary>
            
             <param name="sTag">
             Tag to get a sample image URL for.
             </param>
            
             <param name="sApiKey">
             Flickr API key.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="sSampleImageUrl">
             Where the URL gets stored if true is returned.
             </param>
            
             <returns>
             true if the sample image URL was obtained, false if some sort of error
             occurred while attempting to get it.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.AppendVertexXmlNode(System.String,Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.Dictionary{System.String,System.Xml.XmlNode})">
             <summary>
             Appends a vertex XML node to the document for a tag if such a node
             doesn't already exist.
             </summary>
            
             <param name="sTag">
             Tag to add a vertex XML node for.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oTagDictionary">
             The key is the tag name and the value is the corresponding GraphML XML
             node that represents the tag.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.CreateGraphMLXmlDocument(System.Boolean)">
             <summary>
             Creates a GraphMLXmlDocument representing a network of Flickr related
             tags.
             </summary>
            
             <param name="bIncludeSampleThumbnails">
             true to include a sample thumbnail for each tag.
             photos.
             </param>
            
             <returns>
             A GraphMLXmlDocument representing a network of Flickr related tags.
             The document includes GraphML-attribute definitions but no vertices or
             edges.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.WhatToIncludeFlagIsSet(Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.WhatToInclude,Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.WhatToInclude)">
             <summary>
             Checks whether a flag is set in an ORed combination of WhatToInclude
             flags.
             </summary>
            
             <param name="eORedEnumFlags">
             Zero or more ORed Enum flags.
             </param>
            
             <param name="eORedEnumFlagsToCheck">
             One or more Enum flags to check.
             </param>
            
             <returns>
             true if any of the <paramref name="eORedEnumFlagsToCheck" /> flags are
             set in <paramref name="eORedEnumFlags" />.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.GetNetworkDescription(System.String,Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel)">
             <summary>
             Gets a description of the network.
             </summary>
            
             <param name="sTag">
             Tag to get related tags for.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="eNetworkLevel">
             Network level to include.  Must be NetworkLevel.One, OnePointFive, or
             Two.
             </param>
            
             <returns>
             A description of the network.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Handles the DoWork event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Source of the event.
             </param>
            
             <param name="e">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.WhatToInclude">
             <summary>
             Flags that specify what should be included in a network requested from
             this class.
             </summary>
            
             <remarks>
             The flags can be ORed together.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.WhatToInclude.None">
            <summary>
            Include nothing.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.WhatToInclude.SampleThumbnails">
            <summary>
            Include a sample thumbnail for each tag.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.GetNetworkAsyncArgs">
            <summary>
            Contains the arguments needed to asynchronously get the Flickr tags
            related to a specified tag.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.GetNetworkAsyncArgs.Tag">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.GetNetworkAsyncArgs.WhatToInclude">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrRelatedTagNetworkAnalyzer.GetNetworkAsyncArgs.NetworkLevel">
            
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer">
             <summary>
             Gets a network of Flickr users.
             </summary>
            
             <remarks>
             Use <see cref="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.GetNetworkAsync(System.String,Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.Int32,System.String)"/> to asynchronously get a directed network
             of Flickr users.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.CommentDateUtcID">
            GraphML-attribute IDs.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.CommentUrlID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.RealNameID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.TotalPhotosID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.IsProfessionalID">
            
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.GetNetworkAsync(System.String,Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.Int32,System.String)">
             <summary>
             Asynchronously gets a directed network of Flickr users.
             </summary>
            
             <param name="screenName">
             The screen name of the Flickr user whose network should be analyzed.
             </param>
            
             <param name="whatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="networkLevel">
             Network level to include.
             </param>
            
             <param name="maximumPerRequest">
             Maximum number of people or photos to request for each query, or
             Int32.MaxValue for no limit.
             </param>
            
             <param name="apiKey">
             Flickr API key.
             </param>
            
             <remarks>
             When the analysis completes, the <see cref="E:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.AnalysisCompleted"/> event fires.  The
             <see cref="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result"/> property will return
             an XmlDocument containing the network as GraphML.
            
             <para>
             To cancel the analysis, call <see cref="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.CancelAsync"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.GetUserNetworkInternal(System.String,Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.Int32,System.String)">
             <overloads>
             Gets a network of Flickr users.
             </overloads>
            
             <summary>
             Gets a network of Flickr users.
             </summary>
            
             <param name="sScreenName">
             Flickr screen name.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="eNetworkLevel">
             Network level to include.  Must be NetworkLevel.One, OnePointFive, or
             Two.
             </param>
            
             <param name="iMaximumPerRequest">
             Maximum number of people or photos to request for each query, or
             Int32.MaxValue for no limit.
             </param>
            
             <param name="sApiKey">
             Flickr API key.
             </param>
            
             <returns>
             An XmlDocument containing the network as GraphML.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.GetUserNetworkInternal(System.String,Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.Int32,System.String,Smrf.SocialNetworkLib.RequestStatistics,Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Gets a network of Flickr users, given a GraphMLXmlDocument.
             </summary>
            
             <param name="sScreenName">
             Flickr screen name.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="eNetworkLevel">
             Network level to include.  Must be NetworkLevel.One, OnePointFive, or
             Two.
             </param>
            
             <param name="iMaximumPerRequest">
             Maximum number of people or photos to request for each query, or
             Int32.MaxValue for no limit.
             </param>
            
             <param name="sApiKey">
             Flickr API key.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument to populate with the requested network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.GetUserNetworkRecursive(System.String,System.String,Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.WhatToInclude,System.Boolean,Smrf.SocialNetworkLib.NetworkLevel,System.Int32,System.String,System.Int32,Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.Dictionary{System.String,System.Xml.XmlNode},Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Recursively gets a network of Flickr users.
             </summary>
            
             <param name="sUserID">
             Flickr user ID.
             </param>
            
             <param name="sScreenName">
             Flickr screen name.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="bIncludeContactsThisCall">
             true to include the user's contacts, false to include the people who
             have commented on the user's photos.
             </param>
            
             <param name="eNetworkLevel">
             Network level to include.  Must be NetworkLevel.One, OnePointFive, or
             Two.
             </param>
            
             <param name="iMaximumPerRequest">
             Maximum number of people or photos to request for each query, or
             Int32.MaxValue for no limit.
             </param>
            
             <param name="sApiKey">
             Flickr API key.
             </param>
            
             <param name="iRecursionLevel">
             Recursion level for this call.  Must be 1 or 2.  Gets incremented when
             recursing.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oUserIDDictionary">
             The key is the user ID and the value is the corresponding GraphML XML
             node that represents the user.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.CreateGraphMLXmlDocument(System.Boolean,System.Boolean)">
             <summary>
             Creates a GraphMLXmlDocument representing a network of Flickr users.
             </summary>
            
             <param name="bIncludeCommenterVertices">
             true to include a vertex for each user who has commented on the user's
             photos.
             </param>
            
             <param name="bIncludeUserInformation">
             true to include information about each user in the network.
             </param>
            
             <returns>
             A GraphMLXmlDocument representing a network of Flickr users.  The
             document includes GraphML-attribute definitions but no vertices or
             edges.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.WhatToIncludeFlagIsSet(Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.WhatToInclude,Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.WhatToInclude)">
             <summary>
             Checks whether a flag is set in an ORed combination of WhatToInclude
             flags.
             </summary>
            
             <param name="eORedEnumFlags">
             Zero or more ORed Enum flags.
             </param>
            
             <param name="eORedEnumFlagsToCheck">
             One or more Enum flags to check.
             </param>
            
             <returns>
             true if any of the <paramref name="eORedEnumFlagsToCheck" /> flags are
             set in <paramref name="eORedEnumFlags" />.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.GetNetworkDescription(System.String,Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.Int32)">
             <summary>
             Gets a description of the network.
             </summary>
            
             <param name="sScreenName">
             Flickr screen name.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="eNetworkLevel">
             Network level to include.  Must be NetworkLevel.One, OnePointFive, or
             Two.
             </param>
            
             <param name="iMaximumPerRequest">
             Maximum number of people or photos to request for each query, or
             Int32.MaxValue for no limit.
             </param>
            
             <returns>
             A description of the network.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.GetContactsOrCommentersEnumerator(System.String,System.Boolean,System.Int32,Smrf.XmlLib.GraphMLXmlDocument,System.String,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Gets an object that will enumerate the child XML nodes containing
             information about a Flickr user.
             </summary>
            
             <param name="sUserID">
             Flickr user ID.
             </param>
            
             <param name="bForContacts">
             true if getting the user's contacts, false if getting the user's
             commenters.
             </param>
            
             <param name="iMaximumPerRequest">
             Maximum number of people or photos to request for each query, or
             Int32.MaxValue for no limit.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
             <param name="sApiKey">
             Flickr API key.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <returns>
             The requested enumerator.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.GetCommentersEnumerator(System.String,System.Int32,System.Boolean,System.String,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Gets an object that will enumerate the "comment" XML nodes for the
             people who have commented on a Flickr user's photos.
             </summary>
            
             <param name="sUserID">
             User ID to get the comments for.
             </param>
            
             <param name="iMaximumPerRequest">
             Maximum number of people or photos to request for each query, or
             Int32.MaxValue for no limit.
             </param>
            
             <param name="bSkipMostPage1Errors">
             If true, most page-1 errors are skipped over.  If false, they are
             rethrown.  (Errors that occur on page 2 and above are always skipped.)
             </param>
            
             <param name="sApiKey">
             Flickr API key.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.ReportProgressForContactsOrCommenters(System.String,System.Boolean)">
             <summary>
             Reports progress before getting a user's contacts or subscribers.
             </summary>
            
             <param name="sScreenName">
             Flickr screen name.
             </param>
            
             <param name="bForContacts">
             true if getting the user's contacts, false if getting the user's
             commenters.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.TryAppendVertexXmlNode(System.String,System.String,Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.Dictionary{System.String,System.Xml.XmlNode})">
             <summary>
             Appends a vertex XML node to the GraphML document for a user if such a
             node doesn't already exist.
             </summary>
            
             <param name="sUserID">
             User ID to add a vertex XML node for.
             </param>
            
             <param name="sScreenName">
             Screen name to add a vertex XML node for.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oUserIDDictionary">
             The key is the user ID and the value is the corresponding GraphML XML
             node that represents the user.
             </param>
            
             <returns>
             true if a vertex XML node was added, false if a vertex XML node already
             exists.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.GetScreenNameFromVertexXmlNode(System.Xml.XmlNode)">
             <summary>
             Gets the user name from a vertex XML node in the GraphML document.
             </summary>
            
             <param name="oVertexXmlNode">
             A vertex node from the GraphML document.
             </param>
            
             <returns>
             The user name from the vertex XML node.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.AppendUserInformationGraphMLAttributeValues(Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.Dictionary{System.String,System.Xml.XmlNode},System.String,Smrf.SocialNetworkLib.RequestStatistics)">
             <overloads>
             Appends user information GraphML attribute values to the GraphML
             document.
             </overloads>
            
             <summary>
             Appends user information GraphML attribute values to the GraphML
             document for all users in the network.
             </summary>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oUserIDDictionary">
             The key is the user ID and the value is the corresponding GraphML XML
             node that represents the user.
             </param>
            
             <param name="sApiKey">
             Flickr API key.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.AppendUserInformationGraphMLAttributeValues(System.String,System.Xml.XmlNode,Smrf.XmlLib.GraphMLXmlDocument,System.String,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Appends user information GraphML attribute values to the GraphML
             document for one user in the network.
             </summary>
            
             <param name="sUserID">
             The user ID.
             </param>
            
             <param name="oVertexXmlNode">
             The GraphML XML node corresponding to the user.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="sApiKey">
             Flickr API key.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Handles the DoWork event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Source of the event.
             </param>
            
             <param name="e">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.WhatToInclude">
             <summary>
             Flags that specify what should be included in a network requested from
             this class.
             </summary>
            
             <remarks>
             The flags can be ORed together.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.WhatToInclude.None">
            <summary>
            Include nothing.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.WhatToInclude.ContactVertices">
            <summary>
            Include a vertex for each of the user's contacts.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.WhatToInclude.CommenterVertices">
            <summary>
            Include a vertex for each user who has commented on the user's
            photos.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.WhatToInclude.UserInformation">
            <summary>
            Include information about each user in the network.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.GetNetworkAsyncArgs">
            <summary>
            Contains the arguments needed to asynchronously get a network of Flickr
            users.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.GetNetworkAsyncArgs.ScreenName">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.GetNetworkAsyncArgs.WhatToInclude">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.GetNetworkAsyncArgs.NetworkLevel">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Flickr.FlickrUserNetworkAnalyzer.GetNetworkAsyncArgs.MaximumPerRequest">
            
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer">
             <summary>
             Uses the NodeXL Graph Server to get a network created from a specified set
             of tweets.
             </summary>
            
             <remarks>
             Use <see cref="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetNetworkAsync(System.String,System.DateTime,System.DateTime,System.Boolean,System.String,System.String)"/> to asynchronously get the network, or <see cref="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetNetwork(System.String,System.DateTime,System.Int32,System.Boolean,System.String,System.String)"/> to get it synchronously.
            
             <para>
             The network is obtained from the NodeXL Graph Server, which is a server
             that periodically collects tweets and user information for a small set of
             search terms and stores the data in a database.  This class makes an HTTP
             call to a WCF service running on the server, and the server returns a
             complete graph (as GraphML) to this class.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GraphServiceUrl">
            URL of the Graph Server.  This is an Elastic IP address created within
            Amazon EC2 and assigned to the Graph Server EC2 instance.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.SendTimeoutMinutes">
            Send timeout, in minutes.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.ReceiveTimeoutMinutes">
            Receive timeout, in minutes.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.NetworkSource">
            The source of Graph Server networks, used in network descriptions.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.MaximumBytes">
             Maximum number of bytes that can be received from the WCF service.
             This is the value to use for length-related parameters in the WCF
             binding object.  If this maximum is exceeded, a
             System.ServiceModel.CommunicationException will occur when attempting
             to receive a network.
            
             This must be the same value that is specified many times in the
             Web.config file in the GraphServer\WcfService project.  Search for the
             following text in the Web.config file to find the value:
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetNetworkAsync(System.String,System.DateTime,System.DateTime,System.Boolean,System.String,System.String)">
             <overloads>
             Asynchronously gets a network created from a specified set of tweets.
             </overloads>
            
             <summary>
             Asynchronously gets a network created from a set of tweets specified by
             a search term and a date range.
             </summary>
            
             <param name="searchTerm">
             The term to search for.
             </param>
            
             <param name="minimumStatusDateUtc">
             Minimum status date, in UTC.
             </param>
            
             <param name="maximumStatusDateUtc">
             Maximum status date, in UTC.
             </param>
            
             <param name="expandStatusUrls">
             true to expand the URLs in each status.
             </param>
            
             <param name="graphServerUserName">
             User name for the account to use on the NodeXL Graph Server.
             </param>
            
             <param name="graphServerPassword">
             Password for the account to use on the NodeXL Graph Server.
             </param>
            
             <remarks>
             When the analysis completes, the <see cref="E:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.AnalysisCompleted"/> event fires.  The
             <see cref="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result"/> property will return
             an XmlDocument containing the network as GraphML.
            
             <para>
             To cancel the analysis, call <see cref="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.CancelAsync"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetNetworkAsync(System.String,System.DateTime,System.Int32,System.Boolean,System.String,System.String)">
             <summary>
             Asynchronously gets a network created from a set of tweets specified by
             a search term, a maximum date and a maximum number of tweets going
             backward.
             </summary>
            
             <param name="searchTerm">
             The term to search for.
             </param>
            
             <param name="maximumStatusDateUtc">
             Maximum status date, in UTC.  Note that is a DateTime and not just a
             date, so if you want all statuses on 2014/04/01, for example, you have
             to specify 2014/04/01 23:59:59.
             </param>
            
             <param name="maximumStatusesGoingBackward">
             Maximum number of statuses to get, going backward in time.
             </param>
            
             <param name="expandStatusUrls">
             true to expand the URLs in each status.
             </param>
            
             <param name="graphServerUserName">
             User name for the account to use on the NodeXL Graph Server.
             </param>
            
             <param name="graphServerPassword">
             Password for the account to use on the NodeXL Graph Server.
             </param>
            
             <remarks>
             When the analysis completes, the <see cref="E:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.AnalysisCompleted"/> event fires.  The
             <see cref="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result"/> property will return
             an XmlDocument containing the network as GraphML.
            
             <para>
             To cancel the analysis, call <see cref="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.CancelAsync"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetNetwork(System.String,System.DateTime,System.Int32,System.Boolean,System.String,System.String)">
             <summary>
             Synchronously gets a network created from a specified set of tweets.
             </summary>
            
             <param name="searchTerm">
             The term to search for.
             </param>
            
             <param name="maximumStatusDateUtc">
             Maximum status date, in UTC.  Note that is a DateTime and not just a
             date, so if you want all statuses on 2014/04/01, for example, you have
             to specify 2014/04/01 23:59:59.
             </param>
            
             <param name="maximumStatusesGoingBackward">
             Maximum number of statuses to get, going backward in time.
             </param>
            
             <param name="expandStatusUrls">
             true to expand the URLs in each status.
             </param>
            
             <param name="graphServerUserName">
             User name for the account to use on the NodeXL Graph Server.
             </param>
            
             <param name="graphServerPassword">
             Password for the account to use on the NodeXL Graph Server.
             </param>
            
             <returns>
             An XmlDocument containing the network as GraphML.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.ExceptionToMessage(System.Exception)">
             <summary>
             Converts an exception to an error message appropriate for a user
             interface.
             </summary>
            
             <param name="oException">
             The exception that occurred.
             </param>
            
             <returns>
             An error message appropriate for a user interface.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetNetworkInternal(Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria,System.Boolean,System.String,System.String)">
             <overloads>
             Gets the requested network.
             </overloads>
            
             <summary>
             Gets the requested network and handles exceptions.
             </summary>
            
             <param name="oStatusCriteria">
             Specifies the criteria used for getting statuses from the NodeXL Graph
             Server.
             </param>
            
             <param name="bExpandStatusUrls">
             true to expand the URLs in each status.
             </param>
            
             <param name="sGraphServerUserName">
             User name for the account to use on the NodeXL Graph Server.
             </param>
            
             <param name="sGraphServerPassword">
             Password for the account to use on the NodeXL Graph Server.
             </param>
            
             <returns>
             An XmlDocument containing the network as GraphML.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetNetworkInternal(Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria,System.Boolean,System.String,System.String,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Gets the requested network.
             </summary>
            
             <param name="oStatusCriteria">
             Specifies the criteria used for getting statuses from the NodeXL Graph
             Server.
             </param>
            
             <param name="bExpandStatusUrls">
             true to expand the URLs in each status.
             </param>
            
             <param name="sGraphServerUserName">
             User name for the account to use on the NodeXL Graph Server.
             </param>
            
             <param name="sGraphServerPassword">
             Password for the account to use on the NodeXL Graph Server.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <returns>
             The XmlDocument containing the requested network.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetNetworkDescription(Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria,System.Xml.XmlDocument)">
             <summary>
             Gets a description of the network.
             </summary>
            
             <param name="oStatusCriteria">
             Specifies the criteria used for getting statuses from the NodeXL Graph
             Server.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The XmlDocument that contains the network.
             </param>
            
             <returns>
             A description of the network.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetVertexCount(System.Xml.XmlDocument)">
             <summary>
             Gets the number of vertices in the network.
             </summary>
            
             <param name="oGraphMLXmlDocument">
             The XmlDocument that contains the network.
             </param>
            
             <returns>
             The number of vertices in the network.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetWcfServiceBinding">
             <summary>
             Returns the binding to use for communicating with the Graph Server's
             WCF service.
             </summary>
            
             <returns>
             A <see cref="T:System.ServiceModel.BasicHttpBinding"/> object.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Handles the DoWork event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Source of the event.
             </param>
            
             <param name="e">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetNetworkAsyncArgs">
            <summary>
            Contains the arguments needed to asynchronously get the network.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetNetworkAsyncArgs.StatusCriteria">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetNetworkAsyncArgs.ExpandStatusUrls">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetNetworkAsyncArgs.GraphServerUserName">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.GraphServerTwitterSearchNetworkAnalyzer.GetNetworkAsyncArgs.GraphServerPassword">
            
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria">
            <summary>
            Specifies the criteria used for getting statuses from the NodeXL Graph
            Server.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.#ctor(System.String,System.DateTime,System.DateTime)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria"/> class with a search term and a date range.
             </summary>
            
             <param name="searchTerm">
             The term to search for.
             </param>
            
             <param name="minimumStatusDateUtc">
             Minimum status date, in UTC.
             </param>
            
             <param name="maximumStatusDateUtc">
             Maximum status date, in UTC.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.#ctor(System.String,System.DateTime,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria"/> class with a search term, maximum status date
             and a maximum number of statuses going backward in time.
             </summary>
            
             <param name="searchTerm">
             The term to search for.
             </param>
            
             <param name="maximumStatusDateUtc">
             Maximum status date, in UTC.
             </param>
            
             <param name="maximumStatusesGoingBackward">
             Maximum number of statuses to get, going backward in time.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.#ctor(System.String,System.DateTime)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria"/> class with a search term and maximum status
             date.
             </summary>
            
             <param name="searchTerm">
             The term to search for.
             </param>
            
             <param name="maximumStatusDateUtc">
             Maximum status date, in UTC.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.m_sSearchTerm">
            The term to search for.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.m_oMinimumStatusDateUtc">
            Minimum status date, in UTC, or null.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.m_oMaximumStatusDateUtc">
            Maximum status date, in UTC.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.m_iMaximumStatusesGoingBackward">
            Maximum number of statuses to get going backward in time, or null.
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.SearchTerm">
             <summary>
             Gets the term to search for.
             </summary>
            
             <value>
             The term to search for.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.HasDateRange">
             <summary>
             Gets a flag specifying whether a status date range should be used.
             </summary>
            
             <value>
             true if a status date range should be used, false if a maximum status
             date and a maximum number of statuses going backward should be used.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.MinimumStatusDateUtc">
             <summary>
             Gets the minimum status date.
             </summary>
            
             <value>
             The minimum status date, in UTC.
             </value>
            
             <remarks>
             Use this property only if <see cref="P:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.HasDateRange"/> returns true.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.MaximumStatusDateUtc">
             <summary>
             Gets the maximum status date.
             </summary>
            
             <value>
             The maximum status date, in UTC.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.MaximumStatusesGoingBackward">
             <summary>
             Gets the maximum number of statuses to get, going backward in time.
             </summary>
            
             <value>
             The maximum number of statuses to get, going backward in time.
             </value>
            
             <remarks>
             Use this property only if <see cref="P:Smrf.NodeXL.GraphDataProviders.GraphServer.StatusCriteria.HasDateRange"/> returns false.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken">
             <summary>
             Represents a Twitter OAuth access token.
             </summary>
            
             <remarks>
             Call <see cref="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken.Save(System.String,System.String)"/> when an OAuth access token is obtained from
             Twitter.  <see cref="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken.Save(System.String,System.String)"/> saves the token to a file in the user's
             profile.  Call <see cref="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken.TryLoad(System.String@,System.String@)"/> to determine whether a token has been
             obtained from Twitter.
            
             <para>
             (Confusingly, a Twitter "token" consists of both a token string and a
             secret string.  The same word is used for both a single string and a pair
             of strings.)
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken.FileName">
            Name of the file where the user's access token is stored, without a
            path.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken"/>
            class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken.Save(System.String,System.String)">
             <summary>
             Saves an access token to a file in the user's profile.
             </summary>
            
             <param name="token">
             Twitter access token.
             </param>
            
             <param name="secret">
             Twitter access token secret.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken.TryLoad(System.String@,System.String@)">
             <summary>
             Attempts to load an access token from a file in the user's profile.
             </summary>
            
             <param name="token">
             Where the Twitter access token gets stored if true is returned.
             </param>
            
             <param name="secret">
             Where the Twitter access token secret gets stored if true is returned.
             </param>
            
             <returns>
             true if the access token was loaded.
             </returns>
            
             <remarks>
             If the load is successful, the token is cached so that additional disk
             accesses are not required if this method is called again.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken.Exists">
             <summary>
             Determines whether an access token exists.
             </summary>
            
             <returns>
             true if an access token exists.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken.Delete">
            <summary>
            Deletes the access token if it exists.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken.GetAccessTokenFilePath">
             <summary>
             Gets the full path to the current user's Twitter access token file.
             </summary>
            
             <remarks>
             This is public only to make it accessible to unit tests.  It should not
             be used by other callers.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken.m_sToken">
            Twitter access token, or null if a token hasn't been obtained for the
            current user.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAccessToken.m_sSecret">
            Twitter access token secret, or null if a token hasn't been obtained
            for the current user.
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationStatus">
            <summary>
            Specifies the user's Twitter authorization status.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationStatus.HasTwitterAccountNotAuthorized">
            <summary>
            The user has a Twitter account, but she has not yet authorized Twitter
            to use it.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterAuthorizationStatus.HasTwitterAccountAuthorized">
            <summary>
            The user has a Twitter account and she has authorized Twitter to use
            it.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TweetDateRangeAnalyzer">
            <summary>
            Analyzes the range of tweet dates in a Twitter search network.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TweetDateRangeAnalyzer.AddTweetDateRangeToNetworkDescription(System.Xml.XmlDocument,Smrf.NodeXL.GraphDataProviders.NetworkDescriber)">
             <summary>
             Adds the range of tweet dates in a Twitter search network to a network
             description.
             </summary>
            
             <param name="graphMLXmlDocument">
             The GraphMLXmlDocument that contains the Twitter search network.
             </param>
            
             <param name="networkDescriber">
             Concatenates sentences into a network description.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TweetDateRangeAnalyzer.TryGetEdgeGraphMLAttributeValue(System.Xml.XmlNode,System.String,System.Xml.XmlNamespaceManager,System.String@)">
             <summary>
             Attempts to get the value of a specified GraphML-Attribute.
             </summary>
            
             <param name="oEdgeXmlNode">
             The XmlNode that represents the edge.
             </param>
            
             <param name="sAttributeID">
             The GraphML-Attribute's ID.
             </param>
            
             <param name="oXmlNamespaceManager">
             The XmlNamespaceManager to use.  It's assumed that "g" is used as the
             GraphML namespace prefix.
             </param>
            
             <param name="sAttributeValue">
             Where the value of the specified GraphML-Attribute gets stored if true
             is returned.
             </param>
            
             <returns>
             true if the specified value was found and was a non-empty string.
             </returns>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase">
             <summary>
             Base class for classes that analyze a Twitter network.
             </summary>
            
             <remarks>
             The derived class must call <see cref="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.BeforeGetNetwork"/> before
             getting each network.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.NetworkSource">
            The source of Twitter networks, used in network descriptions.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.ExceptionToMessage(System.Exception)">
             <summary>
             Converts an exception to an error message appropriate for a user
             interface.
             </summary>
            
             <param name="oException">
             The exception that occurred.
             </param>
            
             <returns>
             An error message appropriate for a user interface.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.BeforeGetNetwork">
             <summary>
             Performs tasks required before getting a network.
             </summary>
            
             <remarks>
             The derived class must call this method before getting each network.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.ReportProgressForFriendsOrFollowers(System.String,System.Boolean)">
             <summary>
             Reports progress before getting a user's friends or followers.
             </summary>
            
             <param name="sScreenName">
             The user's screen name.
             </param>
            
             <param name="bReportProgressForFriends">
             true if getting the user's friends, false if getting his followers.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.TryGetUserValueDictionary(System.String,Smrf.SocialNetworkLib.RequestStatistics,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
             <summary>
             Attempts to get a dictionary of values for a specified user from
             Twitter.
             </summary>
            
             <param name="sScreenName">
             Screen name to get a dictionary of values for.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="bIgnoreWebAndJsonExceptions">
             If a WebException or JSON exception is caught and this is true, false
             is returned.  Otherwise, the exception is rethrown.
             </param>
            
             <param name="oUserValueDictionary">
             Where a dictionary of values for the user gets stored if true is
             returned.
             </param>
            
             <returns>
             true if successful.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.GetTwitterResponseAsString(System.String,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Gets a response from a Twitter URL as a string.
             </summary>
            
             <param name="sUrl">
             The URL to get the string from.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <returns>
             The string returned by the Twitter server.
             </returns>
            
             <remarks>
             If an error occurs, an exception is thrown.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.EnumerateJsonValues(System.String,System.String,System.Int32,System.Boolean,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Gets a JSON response from a Twitter URL that uses cursoring, then
             enumerates a specified set of values in the response.
             </summary>
            
             <param name="sUrl">
             The URL to get the JSON from.  Can include URL parameters.
             </param>
            
             <param name="sJsonName">
             If the top level of the JSON response contains a set of name/value
             pairs, this parameter should be the name whose value is the array of
             objects this method will enumerate.  If the top level of the JSON
             response contains an array of objects this method will enumerate, this
             parameter should be null. 
             </param>
            
             <param name="iMaximumValues">
             Maximum number of values to return, or Int32.MaxValue for no limit.
             </param>
            
             <param name="bSkipMostPage1Errors">
             If true, most page-1 errors are skipped over.  If false, they are
             rethrown.  (Errors that occur on page 2 and above are always skipped,
             unless they are due to rate limiting.)
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <returns>
             The enumerated values are returned one-by-one, as an Object.
             </returns>
            
             <remarks>
             It's assumed that the Twitter API specified by <paramref name="sUrl"/>
             uses Twitter's cursor scheme for paging, where a "cursor" URL parameter
             specifies which page to get.  "GET friends/ids" is an example of such
             an API.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.EnumerateFriendOrFollowerIDs(System.String,System.Boolean,System.Int32,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Enumerates through a collection of the user IDs of the friends or
             followers of a specified user.
             </summary>
            
             <param name="sScreenName">
             The screen name to get the friends or followers for.
             </param>
            
             <param name="bEnumerateFriendIDs">
             true to enumerate the friend IDs, false to enumerate the follower IDs.
             </param>
            
             <param name="iMaximumPeoplePerRequest">
             Maximum number of people to request for each query, or Int32.MaxValue
             for no limit.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <returns>
             The enumerated IDs are returned one-by-one, as a string.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.EnumerateUserValueDictionaries(System.String[],System.Boolean,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Enumerates through a collection of dictionaries of values for a
             collection of specified users.
             </summary>
            
             <param name="asUserIDsOrScreenNames">
             Array of user IDs or screen names to get user value dictionaries for.
             </param>
            
             <param name="bUserIDsSpecified">
             true if <paramref name="asUserIDsOrScreenNames"/> contains IDs, false
             if it contains screen names.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <returns>
             The enumerated values are returned one-by-one, as a dictionary.
             </returns>
            
             <remarks>
             For each user ID or screen name in <paramref name="asUserIDsOrScreenNames"/>, this method gets information about
             the user from Twitter and returns it as a dictionary of values.  The
             order of the returned values is not necessarily the same as the order
             of the user IDs or screen names.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.TryGetScreenNameAndUserIDFromDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.String@,System.String@)">
             <summary>
             Attempts to get a screen name and ID from a user value dictionary.
             </summary>
            
             <param name="oUserValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about a user.
             </param>
            
             <param name="sScreenName">
             Where the user's screen name gets stored if true is returned, in lower
             case.  If false is returned, this gets set to null.
             </param>
            
             <param name="sUserID">
             Where the user ID gets stored if true is returned.  If false is
             returned, this gets set to null.
             </param>
            
             <returns>
             true if successful.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.TryGetUserIDFromDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.String@)">
             <summary>
             Attempts to get a user ID from a user value dictionary.
             </summary>
            
             <param name="oUserValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about a user.
             </param>
            
             <param name="sUserID">
             Where the user ID gets stored if true is returned.  If false is
             returned, this gets set to null.
             </param>
            
             <returns>
             true if the user ID was obtained.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.TryGetScreenNameFromDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.String@)">
             <summary>
             Attempts to get a user's screen name from a user value dictionary.
             </summary>
            
             <param name="oUserValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about a user.
             </param>
            
             <param name="sScreenName">
             Where the user's screen name gets stored if true is returned, in lower
             case.  If false is returned, this gets set to null.
             </param>
            
             <returns>
             true if the user's screen name was obtained.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.AppendUserInformationFromValueDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},Smrf.XmlLib.GraphMLXmlDocument,Smrf.NodeXL.GraphMLLib.TwitterUser,System.Boolean,System.Boolean,System.Boolean)">
             <summary>
             Appends GraphML-Attribute values from a user value dictionary returned
             by Twitter to a vertex XML node.
             </summary>
            
             <param name="oUserValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about the user.
             </param>
             
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oTwitterUser">
             Contains the vertex XML node from <paramref
             name="oGraphMLXmlDocument" /> to add the GraphML attribute values to.
             </param>
            
             <param name="bIncludeStatistics">
             true to include the user's statistics as GraphML-Attribute values.
             </param>
            
             <param name="bIncludeLatestStatus">
             true to include the user's latest status as a GraphML-Attribute value.
             </param>
            
             <param name="bExpandLatestStatusUrls">
             true to expand all URLs in the latest status that might be shortened
             URLs.
             </param>
            
             <remarks>
             This method reads information from a value dictionary returned by
             Twitter and appends the information to a vertex XML node in the GraphML
             document.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.AppendLatestStatusInformationFromValueDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},Smrf.XmlLib.GraphMLXmlDocument,Smrf.NodeXL.GraphMLLib.TwitterUser,System.Boolean,System.Boolean)">
             <summary>
             Appends GraphML-Attribute values for a user's latest status from a
             value dictionary returned by Twitter to a vertex XML node.
             </summary>
            
             <param name="oStatusValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about the user's status.
             </param>
             
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oTwitterUser">
             Contains the vertex XML node from <paramref
             name="oGraphMLXmlDocument" /> to add the GraphML attribute values to.
             </param>
            
             <param name="bIncludeLatestStatus">
             true to include the user's latest status as a GraphML-Attribute value.
             </param>
            
             <param name="bExpandLatestStatusUrls">
             true to expand all URLs in the latest status that might be shortened
             URLs.
             </param>
            
             <remarks>
             This method reads latest status information from a value dictionary
             returned by Twitter and appends the information to a vertex XML node in
             the GraphML document.  It also adds the latest status to the status
             collection of the <paramref name="oTwitterUser" /> object.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.AppendStartTimeRelationshipDateUtcGraphMLAttributeValue(Smrf.XmlLib.GraphMLXmlDocument,System.Xml.XmlNode,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Appends a GraphML attribute value for the relationship date to an edge
             XML node when the relationship date is the start time of the network
             request.
             </summary>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oEdgeXmlNode">
             The edge XML node to add the Graph-ML attribute value to.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.AppendRepliesToAndMentionsEdgeXmlNodes(Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.IEnumerable{Smrf.NodeXL.GraphMLLib.TwitterUser},System.Collections.Generic.HashSet{System.String})">
             <overloads>
             Appends edge XML nodes for replies-to and mentions relationships.
             </overloads>
            
             <summary>
             Appends edge XML nodes for replies-to and mentions relationships for
             all statuses.
             </summary>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oTwitterUsers">
             Collection of the TwitterUsers in the network.
             </param>
            
             <param name="oUniqueScreenNames">
             Collection of the unique screen names in the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.AppendFriendOrFollowerEdgeXmlNode(System.String,System.String,System.Boolean,Smrf.XmlLib.GraphMLXmlDocument,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Appends an edge XML node for a friend or follower relationship.
             </summary>
            
             <param name="sScreenName1">
             The first screen name to use.
             </param>
            
             <param name="sScreenName2">
             The second screen name to use.
             </param>
            
             <param name="bAppendFriendEdgeXmlNode">
             true if sScreenName2 is a friend of sScreenName1 (which means that
             sScreenName1 follows sScreenName2), or false if sScreenName2
             is a follower of sScreenName1.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.HttpStatusCodesToFailImmediately">
            HTTP status codes that have special meaning with Twitter.  When they
            occur, the requests are not retried.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.m_oTwitterUtil">
            Provides utility methods for getting social networks from Twitter.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterNetworkAnalyzerBase.m_oTwitterStatusTextParser">
            Parses the text of a Twitter tweet.  This class uses only one instance
            to avoid making TwitterStatusTextParser recompile all of its regular
            expressions.
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer">
             <summary>
             Gets a network of people who have tweeted a specified search term.
             </summary>
            
             <remarks>
             Use <see cref="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.GetNetworkAsync(System.String,Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude,System.Int32)"/> to asynchronously get the network, or
             <see cref="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.GetNetwork(System.String,Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude,System.Int32)"/> to get it synchronously.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.MaximumFriends">
            Maximum number of friends to request.  This is arbitrarily set to the
            number of friends returned in one page of the Twitter friends/ids API.
            It can be parameterized later if required.  
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.GetNetworkAsync(System.String,Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude,System.Int32)">
             <summary>
             Asynchronously gets a directed network of people who have tweeted a
             specified search term.
             </summary>
            
             <param name="searchTerm">
             The term to search for.
             </param>
            
             <param name="whatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="maximumStatuses">
             Maximum number of tweets to request.  Can't be Int32.MaxValue.
             </param>
            
             <remarks>
             When the analysis completes, the <see cref="E:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.AnalysisCompleted"/> event fires.  The
             <see cref="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result"/> property will return
             an XmlDocument containing the network as GraphML.
            
             <para>
             To cancel the analysis, call <see cref="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.CancelAsync"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.GetNetwork(System.String,Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude,System.Int32)">
             <summary>
             Synchronously gets a directed network of people who have tweeted a
             specified search term.
             </summary>
            
             <param name="searchTerm">
             The term to search for.
             </param>
            
             <param name="whatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="maximumStatuses">
             Maximum number of tweets to request.  Can't be Int32.MaxValue.
             </param>
            
             <returns>
             An XmlDocument containing the network as GraphML.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.GetNetworkInternal(System.String,Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude,System.Int32)">
             <overloads>
             Gets the requested network.
             </overloads>
            
             <summary>
             Gets the requested network.
             </summary>
            
             <param name="sSearchTerm">
             The term to search for.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="iMaximumStatuses">
             Maximum number of tweets to request.  Can't be Int32.MaxValue.
             </param>
            
             <returns>
             An XmlDocument containing the network as GraphML.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.GetNetworkInternal(System.String,Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude,System.Int32,Smrf.SocialNetworkLib.RequestStatistics,Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Gets the requested network, given a GraphMLXmlDocument.
             </summary>
            
             <param name="sSearchTerm">
             The term to search for.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="iMaximumStatuses">
             Maximum number of tweets to request.  Can't be Int32.MaxValue.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument to populate with the requested network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.AppendVertexXmlNodesForSearchTerm(System.String,Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude,System.Int32,Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser},Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Appends a vertex XML node for each person who has tweeted a specified
             search term.
             </summary>
            
             <param name="sSearchTerm">
             The term to search for.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="iMaximumStatuses">
             Maximum number of tweets to request.  Can't be Int32.MaxValue.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument being populated.
             </param>
            
             <param name="oUserIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.  The dictionary is empty when this method is called, and
             this method populates the dictionary.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.AppendVertexXmlNodesForMentionsAndRepliesTo(Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude,Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser},Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Appends a vertex XML node for each person who was mentioned or replied
             to but who didn't tweet the search term himself.
             </summary>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument being populated.
             </param>
            
             <param name="oUserIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.  The dictionary is populated with users who tweeted the
             search term when this method is called, and this method adds more
             users.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.AppendFriendEdgeXmlNodes(System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser},System.Int32,Smrf.XmlLib.GraphMLXmlDocument,Smrf.SocialNetworkLib.RequestStatistics)">
             <overloads>
             Appends edge XML nodes for friends.
             </overloads>
            
             <summary>
             Appends edge XML nodes for the friends in the entire network.
             </summary>
            
             <param name="oUserIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.
             </param>
            
             <param name="iMaximumPeoplePerRequest">
             Maximum number of people to request for each query, or Int32.MaxValue
             for no limit.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.AppendFriendEdgeXmlNodes(System.Collections.Generic.ICollection{System.String},System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser},System.Int32,Smrf.XmlLib.GraphMLXmlDocument,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Appends edge XML nodes for the friends of a specified collection of
             screen names.
             </summary>
            
             <param name="oScreenNames">
             Collection of screen names to append edges for.
             </param>
            
             <param name="oUserIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.
             </param>
            
             <param name="iMaximumPeoplePerRequest">
             Maximum number of people to request for each query, or Int32.MaxValue
             for no limit.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToIncludeFlagIsSet(Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude,Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude)">
             <summary>
             Checks whether a flag is set in an ORed combination of WhatToInclude
             flags.
             </summary>
            
             <param name="eORedEnumFlags">
             Zero or more ORed Enum flags.
             </param>
            
             <param name="eORedEnumFlagsToCheck">
             One or more Enum flags to check.
             </param>
            
             <returns>
             true if any of the <paramref name="eORedEnumFlagsToCheck" /> flags are
             set in <paramref name="eORedEnumFlags" />.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.GetNetworkDescription(System.String,Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude,System.Int32,Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Gets a description of the network.
             </summary>
            
             <param name="sSearchTerm">
             The term to search for.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="iMaximumStatuses">
             Maximum number of tweets to request.  Can't be Int32.MaxValue.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument that contains the network.
             </param>
            
             <returns>
             A description of the network.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Handles the DoWork event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Source of the event.
             </param>
            
             <param name="e">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude">
             <summary>
             Flags that specify what should be included in a network requested from
             this class.
             </summary>
            
             <remarks>
             The flags can be ORed together.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude.None">
            <summary>
            Include nothing.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude.ExpandedStatusUrls">
            <summary>
            Expand the URLs contained within each status.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.WhatToInclude.FollowedEdges">
            <summary>
            Include an edge for each followed relationship.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.GetNetworkAsyncArgs">
            <summary>
            Contains the arguments needed to asynchronously get the network.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.GetNetworkAsyncArgs.SearchTerm">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.GetNetworkAsyncArgs.WhatToInclude">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterSearchNetworkAnalyzer.GetNetworkAsyncArgs.MaximumStatuses">
            
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer">
             <summary>
             Gets a network that shows the connections between a set of Twitter users
             specified by either a Twitter List name or a set of Twitter screen names.
             </summary>
            
             <remarks>
             Use <see cref="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetworkAsync(System.Boolean,System.String,System.Collections.Generic.ICollection{System.String},Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.NetworkType,System.Boolean,System.Int32,System.Boolean)"/> to asynchronously get the network, or
             <see cref="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetwork(System.Boolean,System.String,System.Collections.Generic.ICollection{System.String},Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.NetworkType,System.Boolean,System.Int32,System.Boolean)"/> to get it synchronously.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.VertexIsSpecifiedUserID">
            Vertex attribute id for indicating whether a vertex represents one of
            the users specified by the caller.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.MaximumFriendsOrFollowers">
            Maximum number of friend or follower IDs to request for each user.
            This limit is arbitrary, although (as of June 2014) it should be kept
            below 5,000 to avoid having to get a second page of results from the
            Twitter friends/ids API.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetworkAsync(System.Boolean,System.String,System.Collections.Generic.ICollection{System.String},Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.NetworkType,System.Boolean,System.Int32,System.Boolean)">
             <summary>
             Asynchronously gets a network that shows the connections between a set
             of Twitter users specified by either a Twitter List name or a set of
             Twitter screen names.
             </summary>
            
             <param name="useListName">
             If true, <paramref name="listName"/> must be specified and <paramref name="screenNames"/> is ignored.  If false, <paramref name="screenNames"/> must be specified and <paramref name="listName"/> is ignored.
             </param>
            
             <param name="listName">
             Twitter List name if <paramref name="useListName"/> is true; unused
             otherwise.  Sample List name: "bob/twitterit".
             </param>
            
             <param name="screenNames">
             Zero or more Twitter screen names if <paramref name="useListName"/> is
             false; unused otherwise.  The screen names can be in any case, but they
             get converted to lower case before getting the network.
             </param>
            
             <param name="networkType">
             The type of network to get.
             </param>
            
             <param name="limitToSpecifiedUsers">
             true to include the specified users only, false to also include
             external replied-to users, mentioned users, and friend and follower
             users, depending on the value of <paramref name="networkType"/>.
             </param>
            
             <param name="maximumStatusesPerUser">
             Maximum number of recent statuses to request for each specified user.
             Can't be greater than 200.
             </param>
            
             <param name="expandStatusUrls">
             true to expand the URLs in the statuses.
             </param>
            
             <remarks>
             When the analysis completes, the <see cref="E:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.AnalysisCompleted"/> event fires.  The
             <see cref="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result"/> property will return
             an XmlDocument containing the network as GraphML.
            
             <para>
             To cancel the analysis, call <see cref="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.CancelAsync"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetwork(System.Boolean,System.String,System.Collections.Generic.ICollection{System.String},Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.NetworkType,System.Boolean,System.Int32,System.Boolean)">
             <summary>
             Synchronously gets a network that shows the connections between a set
             of Twitter users who were specified by either a Twitter List name or a
             set of Twitter screen names.
             </summary>
            
             <param name="useListName">
             If true, <paramref name="listName" /> must be specified and <paramref
             name="screenNames" /> is ignored.  If false, <paramref
             name="screenNames" /> must be specified and <paramref
             name="listName" /> is ignored.
             </param>
            
             <param name="listName">
             Twitter List name if <paramref name="useListName" /> is true; unused
             otherwise.  Sample List name: "bob/twitterit".
             </param>
            
             <param name="screenNames">
             Zero or more Twitter screen names if <paramref name="useListName" /> is
             false; unused otherwise.  The screen names can be in any case, but they
             get converted to lower case before getting the network.
             </param>
            
             <param name="networkType">
             The type of network to get.
             </param>
            
             <param name="limitToSpecifiedUsers">
             true to include the specified users only, false to also include
             external replied-to users, mentioned users, and friend and follower
             users, depending on the value of <paramref name="networkType" />.
             </param>
            
             <param name="maximumStatusesPerUser">
             Maximum number of recent statuses to request for each specified user.
             Can't be greater than 200.
             </param>
            
             <param name="expandStatusUrls">
             true to expand the URLs in the statuses.
             </param>
            
             <returns>
             An XmlDocument containing the network as GraphML.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetworkInternal(System.Boolean,System.String,System.Collections.Generic.ICollection{System.String},Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.NetworkType,System.Boolean,System.Int32,System.Boolean)">
             <summary>
             Gets the requested network.
             </summary>
            
             <param name="bUseListName">
             If true, <paramref name="sListName" /> must be specified and <paramref
             name="oScreenNames" /> is ignored.  If false, <paramref
             name="oScreenNames" /> must be specified and <paramref
             name="sListName" /> is ignored.
             </param>
            
             <param name="sListName">
             Twitter List name if <paramref name="bUseListName" /> is true; unused
             otherwise.  Sample List name: "bob/twitterit".
             </param>
            
             <param name="oScreenNames">
             Zero or more Twitter screen names if <paramref name="bUseListName" />
             is false; unused otherwise.
             </param>
            
             <param name="eNetworkType">
             The type of network to get.
             </param>
            
             <param name="bLimitToSpecifiedUsers">
             true to include the specified users only.
             </param>
            
             <param name="iMaximumStatusesPerUser">
             Maximum number of recent statuses to request for each specified user.
             Can't be greater than 200.
             </param>
            
             <param name="bExpandStatusUrls">
             true to expand the URLs in the statuses.
             </param>
            
             <returns>
             An XmlDocument containing the network as GraphML.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetworkInternal(System.Boolean,System.String,System.Collections.Generic.ICollection{System.String},Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.NetworkType,System.Boolean,System.Int32,System.Boolean,Smrf.SocialNetworkLib.RequestStatistics,Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Gets the requested network and stores it in a provided
             GraphMLXmlDocument.
             </summary>
            
             <param name="bUseListName">
             If true, <paramref name="sListName"/> must be specified and <paramref name="oScreenNames"/> is ignored.  If false, <paramref name="oScreenNames"/> must be specified and <paramref name="sListName"/> is ignored.
             </param>
            
             <param name="sListName">
             Twitter List name if <paramref name="bUseListName"/> is true; unused
             otherwise.  Sample List name: "bob/twitterit".
             </param>
            
             <param name="oScreenNames">
             Zero or more Twitter screen names if <paramref name="bUseListName"/>
             is false; unused otherwise.
             </param>
            
             <param name="eNetworkType">
             The type of network to get.
             </param>
            
             <param name="bLimitToSpecifiedUsers">
             true to include the specified users only.
             </param>
            
             <param name="iMaximumStatusesPerUser">
             Maximum number of recent statuses to request for each specified user.
             Can't be greater than 200.
             </param>
            
             <param name="bExpandStatusUrls">
             true to expand the URLs in the statuses.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument to populate with the requested network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetBasicNetwork(System.Boolean,System.String,System.Collections.Generic.ICollection{System.String},System.Boolean,System.Int32,System.Boolean,Smrf.SocialNetworkLib.RequestStatistics,System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser},Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Appends vertices for the specified users, optional vertices for
             external users replied to and mentioned in the specified users' recent
             statuses, and edges for those recent statuses.
             </summary>
            
             <param name="bUseListName">
             If true, <paramref name="sListName"/> must be specified and <paramref name="oScreenNames"/> is ignored.  If false, <paramref name="oScreenNames"/> must be specified and <paramref name="sListName"/> is ignored.
             </param>
            
             <param name="sListName">
             Twitter List name if <paramref name="bUseListName"/> is true; unused
             otherwise.  Sample List name: "bob/twitterit".
             </param>
            
             <param name="oScreenNames">
             Zero or more Twitter screen names if <paramref name="bUseListName"/>
             is false; unused otherwise.
             </param>
            
             <param name="bLimitToSpecifiedUsers">
             true to include the specified users only.
             </param>
            
             <param name="iMaximumStatusesPerUser">
             Maximum number of recent statuses to request for each specified user.
             Can't be greater than 200.
             </param>
            
             <param name="bExpandStatusUrls">
             true to expand the URLs in the statuses.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oUserIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument to populate with the requested network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.AppendFriendsAndFollowers(System.Boolean,Smrf.SocialNetworkLib.RequestStatistics,System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser},Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Appends vertices and edges for the users who are friends and followers
             of the specified users.
             </summary>
            
             <param name="bLimitToSpecifiedUsers">
             true to include the specified users only.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oUserIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument to populate with the requested network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.AppendSpecifiedUserVertexXmlNode(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32,System.Boolean,Smrf.SocialNetworkLib.RequestStatistics,System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser},Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Appends a vertex XML node for a specified user.
             </summary>
            
             <param name="oUserValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about a user.
             </param>
            
             <param name="iMaximumStatusesPerUser">
             Maximum number of recent statuses to request for each specified user.
             Can't be greater than 200.
             </param>
            
             <param name="bExpandStatusUrls">
             true to expand the URLs in the statuses.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oUserIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument to populate with the requested network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.TryAppendVertexXmlNode(System.String,System.String,System.Boolean,Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser},System.Collections.Generic.Dictionary{System.String,System.Object},Smrf.NodeXL.GraphMLLib.TwitterUser@)">
             <summary>
             Appends a vertex XML node for one person in the network.
             </summary>
            
             <param name="sScreenName">
             The user's screen name.
             </param>
            
             <param name="sUserID">
             The user's ID.
             </param>
            
             <param name="bIsSpecifiedUser">
             true if the user was specified by the caller.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument being populated.
             </param>
            
             <param name="oUserIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.
             </param>
            
             <param name="oUserValueDictionary">
             Name/value pairs parsed from a Twitter JSON response.  Contains
             information about a user.
             </param>
             
             <param name="oTwitterUser">
             Where the TwitterUser that represents the user gets stored.  This gets
             set regardless of whether the node already exists.
             </param>
            
             <returns>
             true if a vertex XML node was added, false if a vertex XML node already
             exists.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.AppendExternalRepliesToAndMentionsVertexXmlNodes(Smrf.SocialNetworkLib.RequestStatistics,System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser},Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Appends vertices for external users replied to and mentioned in the
             specified users' recent statuses.
             </summary>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oUserIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument to populate with the requested network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.AppendFriendsOrFollowers(System.Boolean,System.Boolean,Smrf.SocialNetworkLib.RequestStatistics,System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser},Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Appends vertices and edges for the users who are friends or followers
             of the specified users.
             </summary>
            
             <param name="bAppendFriends">
             true to append the friends, false to append the followers.
             </param>
            
             <param name="bLimitToSpecifiedUsers">
             true to include the specified users only.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oUserIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument to populate with the requested network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetRecentStatuses(System.String,Smrf.NodeXL.GraphMLLib.TwitterUser,System.Int32,System.Boolean,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Gets a user's recent statuses and stores them in the user's TwitterUser
             object.
             </summary>
            
             <param name="sUserID">
             The user's ID.
             </param>
            
             <param name="oTwitterUser">
             Represents the user.
             </param>
            
             <param name="iMaximumStatusesPerUser">
             Maximum number of recent statuses to request for each specified user.
             Can't be greater than 200.
             </param>
            
             <param name="bExpandStatusUrls">
             true to expand the URLs in the statuses.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetExternalRepliesToAndMentionsScreenNames(System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser})">
             <summary>
             Gets the unique external screen names that were replied-to or mentioned
             in the specified users' recent statuses.
             </summary>
            
             <param name="oUserIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.
             </param>
            
             <returns>
             The unique external replies to or mentions screen names, in lower case.
             Does not include the specified users' screen names.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.AddExternalRepliesToOrMentionsScreenName(System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String})">
             <summary>
             Adds an external replies to or mentions screen name to a HashSet.
             </summary>
            
             <param name="sRepliesToOrMentionsScreenName">
             The replies to or mentions screen name.
             </param>
            
             <param name="oExternalRepliesToAndMentionsScreenNames">
             The unique external replies to or mentions screen names, in lower case.
             </param>
            
             <param name="oSpecifiedUserScreenNames">
             The screen names for the specified users.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetFriendOrFollowerUserIDs(System.String,System.Boolean,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Gets the IDs of the friends or followers of a user.
             </summary>
            
             <param name="sScreenName">
             Screen name of the user.
             </param>
            
             <param name="bGetFriendUserIDs">
             true to get the friend user IDs, false to get the follower user IDs.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <returns>
             An array of user IDs.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.EnumerateSpecifiedUsers(System.Boolean,System.String,System.Collections.Generic.ICollection{System.String},Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Enumerates the specified users.
             </summary>
            
             <param name="bUseListName">
             If true, <paramref name="sListName"/> must be specified and <paramref name="oScreenNames"/> is ignored.  If false, <paramref name="oScreenNames"/> must be specified and <paramref name="sListName"/> is ignored.
             </param>
            
             <param name="sListName">
             Twitter List name if <paramref name="bUseListName"/> is true; unused
             otherwise.  Sample List name: "bob/twitterit".
             </param>
            
             <param name="oScreenNames">
             Zero or more Twitter screen names if <paramref name="bUseListName"/>
             is false; unused otherwise.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <returns>
             A user value dictionary is returned by each call until all the basic
             users have been enumerated.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.EnumerateRecentStatuses(System.String,System.Int32,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Enumerates the recent statuses from one user.
             </summary>
            
             <param name="sUserID">
             The user's ID.
             </param>
            
             <param name="iMaximumStatusesPerUser">
             Maximum number of recent statuses to request for each specified user.
             Can't be greater than 200.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <returns>
             A status value dictionary is returned by each call until all the recent
             statuses have been enumerated.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.EnumerateUserValueDictionariesInList(System.String,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Enumerates the user value dictionary for each user in a Twitter List.
             </summary>
            
             <param name="sListName">
             Twitter List name.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <returns>
             The enumerated user value dictionaries are returned one-by-one.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.EnumerateUserValueDictionariesForFriendsOrFollowers(System.String,System.Boolean,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Enumerates the user value dictionary for a user's friends or followers.
             </summary>
            
             <param name="sScreenName">
             Screen name of the user.
             </param>
            
             <param name="bGetFriends">
             true to enumerate the friends, false to enumerate the followers.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <returns>
             The enumerated user value dictionaries are returned one-by-one.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.EnumerateTwitterStatuses(System.Collections.Generic.IEnumerable{Smrf.NodeXL.GraphMLLib.TwitterUser})">
             <summary>
             Enumerates through all the TwitterStatus objects stored in a collection
             of TwitterUser objects.
             </summary>
            
             <param name="oTwitterUsers">
             Collection of TwitterUser objects.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.RemoveDuplicateScreenNames(System.Collections.Generic.ICollection{System.String})">
             <summary>
             Eliminates duplicate screen names from a collection.
             </summary>
            
             <param name="oScreenNames">
             Zero or more Twitter screen names.  May contain duplicates, and the
             screen names can use any combination of lower and upper case.
             </param>
            
             <returns>
             An array of unique screen names, all in lower case.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetSpecifiedUserScreenNames(System.Collections.Generic.Dictionary{System.String,Smrf.NodeXL.GraphMLLib.TwitterUser})">
             <summary>
             Gets the screen names for the specified users.
             </summary>
            
             <param name="oUserIDDictionary">
             The key is the Twitter user ID and the value is the corresponding
             TwitterUser.
             </param>
            
             <returns>
             A collection of screen names, in lower case.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.CreateGraphMLXmlDocument">
             <summary>
             Creates a GraphMLXmlDocument representing a network of Twitter users.
             </summary>
            
             <returns>
             A GraphMLXmlDocument representing a network of Twitter users.  The
             document includes GraphML-attribute definitions but no vertices or
             edges.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetworkDescription(System.Boolean,System.String,System.Collections.Generic.ICollection{System.String},Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.NetworkType,System.Boolean,System.Boolean)">
             <summary>
             Gets a description of the network.
             </summary>
            
             <param name="bUseListName">
             If true, <paramref name="sListName" /> must be specified and <paramref
             name="oScreenNames" /> is ignored.  If false, <paramref
             name="oScreenNames" /> must be specified and <paramref
             name="sListName" /> is ignored.
             </param>
            
             <param name="sListName">
             Twitter List name if <paramref name="bUseListName" /> is true; unused
             otherwise.  Sample List name: "bob/twitterit".
             </param>
            
             <param name="oScreenNames">
             Zero or more Twitter screen names if <paramref name="bUseListName" />
             is false; unused otherwise.
             </param>
            
             <param name="eNetworkType">
             The type of network to get.
             </param>
            
             <param name="bLimitToSpecifiedUsers">
             true to include the specified users only.
             </param>
            
             <param name="bExpandStatusUrls">
             true to expand the URLs in the statuses.
             </param>
            
             <returns>
             A description of the network.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.SetIsSpecifiedUser(Smrf.NodeXL.GraphMLLib.TwitterUser,System.Boolean)">
             <summary>
             Sets the "is specified user" flag on a TwitterUser object.
             </summary>
            
             <param name="oTwitterUser">
             Object to set the flag on.
             </param>
            
             <param name="bIsSpecifiedUser">
             true if the user was specified by the caller.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetIsSpecifiedUser(Smrf.NodeXL.GraphMLLib.TwitterUser)">
             <summary>
             Gets the "is specified user" flag on a TwitterUser object.
             </summary>
            
             <param name="oTwitterUser">
             Object to get the flag from.
             </param>
            
             <returns>
             true if the user was specified by the caller.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Handles the DoWork event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Source of the event.
             </param>
            
             <param name="e">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.NetworkType">
            <summary>
            Specifies the type of Twitter users network to get.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.NetworkType.Basic">
            <summary>
            Include mentions and replies-to relationships.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.NetworkType.BasicPlusFollows">
            <summary>
            Include mentions, replies-to and follows relationships.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetworkAsyncArgs">
            <summary>
            Contains the arguments needed to asynchronously get the network.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetworkAsyncArgs.UseListName">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetworkAsyncArgs.ListName">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetworkAsyncArgs.ScreenNames">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetworkAsyncArgs.NetworkType">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetworkAsyncArgs.LimitToSpecifiedUsers">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetworkAsyncArgs.MaximumStatusesPerUser">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.Twitter.TwitterUsersNetworkAnalyzer.GetNetworkAsyncArgs.ExpandStatusUrls">
            
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase">
            <summary>
            Base class for classes that analyze a YouTube network.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.NetworkSource">
            The source of YouTube networks, used in network descriptions.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.AtomNamespaceUri">
            URI of the Atom namespace.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.GoogleNamespaceUri">
            Namespace URIs used by YouTube.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.YouTubeNamespaceUri">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.MediaNamespaceUri">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.OpenSearchNamespaceUri">
            
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.CreateXmlNamespaceManager(System.Xml.XmlDocument)">
             <summary>
             Creates an XmlNamespaceManager object appropriate for use with an XML
             document returned by YouTube.
             </summary>
            
             <param name="oXmlDocument">
             The XML document returned by YouTube.
             </param>
            
             <returns>
             An XmlNamespaceManager object appropriate for use with the XML
             document.  See the code for the namespace prefixes.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.ExceptionToMessage(System.Exception)">
             <summary>
             Converts an exception to an error message appropriate for a user
             interface.
             </summary>
            
             <param name="oException">
             The exception that occurred.
             </param>
            
             <returns>
             An error message appropriate for a user interface.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.EnumerateXmlNodes(System.String,System.String,System.Int32,System.Boolean,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Get an XmlDocument from an URL, then enumerates a specified set of
             child nodes.
             </summary>
            
             <param name="sUrl">
             The URL to get the document from.  Can include URL parameters.
             </param>
            
             <param name="sXPath">
             The XPath of the child nodes to enumerate.  Sample:
             "feed/entry".
             </param>
            
             <param name="iMaximumXmlNodes">
             Maximum number of child nodes to return, or Int32.MaxValue for no
             limit.
             </param>
            
             <param name="bSkipMostPage1Errors">
             If true, most page-1 errors are skipped over.  If false, they are
             rethrown.  (Errors that occur on page 2 and above are always skipped.)
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.TryGetXmlDocument(System.String,Smrf.SocialNetworkLib.RequestStatistics,System.Xml.XmlDocument@,System.Xml.XmlNamespaceManager@)">
             <summary>
             Attempts to get an XML document from an URL.
             </summary>
            
             <param name="sUrl">
             The URL to get the document from.  Can include URL parameters.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oXmlDocument">
             Where the XmlDocument gets stored if true is returned.
             </param>
            
             <param name="oXmlNamespaceManager">
             Where the XmlNamespaceManager for the XmlDocument gets stored if true
             is returned.
             </param>
            
             <returns>
             true if the XmlDocument was obtained, false if an error occurred.
             </returns>
            
             <remarks>
             If an error occurs, false is returned.  A WebException or XmlException
             is never rethrown.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.GetXmlDocument(System.String,Smrf.SocialNetworkLib.RequestStatistics,System.Xml.XmlNamespaceManager@)">
             <summary>
             Gets an XML document from an URL.
             </summary>
            
             <param name="sUrl">
             The URL to get the document from.  Can include URL parameters.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oXmlNamespaceManager">
             Where the XmlNamespaceManager for the XmlDocument gets stored if true
             is returned.
             </param>
            
             <returns>
             The XmlDocument from the URL.
             </returns>
            
             <remarks>
             If an error occurs, an exception is thrown.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.EncodeUrlParameter(System.String)">
             <summary>
             Encodes an URL parameter for use with YouTube.
             </summary>
            
             <param name="urlParameter">
             The URL parameter to be encoded.  Can't be null.
             </param>
            
             <returns>
             The encoded parameter.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.AppendYouTubeDateGraphMLAttributeValue(System.Xml.XmlNode,System.String,System.Xml.XmlNamespaceManager,Smrf.XmlLib.GraphMLXmlDocument,System.Xml.XmlNode,System.String)">
             <summary>
             Appends a YouTube date GraphML-Attribute value to a vertex XML node. 
             </summary>
            
             <param name="oXmlNodeToSelectFrom">
             Node to select from.
             </param>
             
             <param name="sXPath">
             XPath expression to YouTube date descendant of <paramref
             name="oXmlNodeToSelectFrom" />.
             </param>
            
             <param name="oXmlNamespaceManager">
             NamespaceManager to use, or null to not use one.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oVertexXmlNode">
             The vertex XML node from <paramref name="oGraphMLXmlDocument" /> to add
             the GraphML attribute value to.
             </param>
            
             <param name="sGraphMLAttributeID">
             GraphML ID of the attribute.
             </param>
            
             <returns>
             true if the GraphML-Attribute was appended.
             </returns>
            
             <remarks>
             This method selects from <paramref name="oXmlNodeToSelectFrom" /> using
             the <paramref name="sXPath" /> expression.  If the selection is
             successful, the specified value (which should be a date in YouTube
             format) gets stored on <paramref name="oVertexXmlNode" /> as a Graph-ML
             Attribute.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.FormatYouTubeDate(System.String)">
             <summary>
             Formats a date returned by YouTube.
             </summary>
            
             <param name="sYouTubeDate">
             The date received from YouTube.  Samples:
             "2008-04-29T21:42:41.000-07:00", "2006-05-14T07:54:03.000Z".
             </param>
            
             <returns>
             The formatted date, in UTC.  Sample, in the English-US locale:
             "04-29-2008".
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.YouTubeErrorResponseToMessage(System.Net.HttpWebResponse)">
             <summary>
             Converts an error response from YouTube to an error message appropriate
             for the UI.
             </summary>
            
             <param name="oHttpWebResponse">
             The error response from YouTube.
             </param>
            
             <returns>
             An error message appropriate for the UI, or null if an error message
             couldn't be obtained.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeNetworkAnalyzerBase.HttpStatusCodesToFailImmediately">
            HTTP status codes that have special meaning with YouTube.  When they
            occur, the requests are not retried.
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer">
             <summary>
             Gets a network of YouTube users.
             </summary>
            
             <remarks>
             Use <see cref="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.GetNetworkAsync(System.String,Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.Int32)"/> to asynchronously get a directed network
             of YouTube users.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.SubscribersID">
            GraphML-attribute IDs.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.VideosWatchedID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.JoinedDateUtcID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.FriendsID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.SubscriptionsID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.VideosUploadedID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WebPageUrlPattern">
            Format pattern for the URL of the YouTube Web page for a person.  The
            {0} argument must be replaced with a YouTube user name.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.GetNetworkAsync(System.String,Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.Int32)">
             <summary>
             Asynchronously gets a directed network of YouTube users.
             </summary>
            
             <param name="userNameToAnalyze">
             The user name of the YouTube user whose network should be analyzed.
             </param>
            
             <param name="whatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="networkLevel">
             Network level to include.
             </param>
            
             <param name="maximumPeoplePerRequest">
             Maximum number of people to request for each query, or Int32.MaxValue
             for no limit.
             </param>
            
             <remarks>
             When the analysis completes, the <see cref="E:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.AnalysisCompleted"/> event fires.  The
             <see cref="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result"/> property will return
             an XmlDocument containing the network as GraphML.
            
             <para>
             To cancel the analysis, call <see cref="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.CancelAsync"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.GetUserNetworkInternal(System.String,Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.Int32)">
             <overloads>
             Gets a network of YouTube users.
             </overloads>
            
             <summary>
             Gets a network of YouTube users.
             </summary>
            
             <param name="sUserNameToAnalyze">
             The user name of the YouTube user whose network should be analyzed.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="eNetworkLevel">
             Network level to include.  Must be NetworkLevel.One, OnePointFive, or
             Two.
             </param>
            
             <param name="iMaximumPeoplePerRequest">
             Maximum number of people to request for each query, or Int32.MaxValue
             for no limit.
             </param>
            
             <returns>
             An XmlDocument containing the network as GraphML.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.GetUserNetworkInternal(System.String,Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.Int32,Smrf.SocialNetworkLib.RequestStatistics,Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Gets a network of YouTube users, given a GraphMLXmlDocument.
             </summary>
            
             <param name="sUserNameToAnalyze">
             The user name of the YouTube user whose network should be analyzed.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="eNetworkLevel">
             Network level to include.  Must be NetworkLevel.One, OnePointFive, or
             Two.
             </param>
            
             <param name="iMaximumPeoplePerRequest">
             Maximum number of people to request for each query, or Int32.MaxValue
             for no limit.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument to populate with the requested network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.GetUserNetworkRecursive(System.String,Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WhatToInclude,System.Boolean,Smrf.SocialNetworkLib.NetworkLevel,System.Int32,System.Int32,Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.Dictionary{System.String,System.Xml.XmlNode},Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Recursively gets a network of YouTube users.
             </summary>
            
             <param name="sUserName">
             The user name to use in this call.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="bIncludeFriendsThisCall">
             true to include the user's friends, false to include the people
             subscribed to by the user.
             </param>
            
             <param name="eNetworkLevel">
             Network level to include.  Must be NetworkLevel.One, OnePointFive, or
             Two.
             </param>
            
             <param name="iMaximumPeoplePerRequest">
             Maximum number of people to request for each query, or Int32.MaxValue
             for no limit.
             </param>
            
             <param name="iRecursionLevel">
             Recursion level for this call.  Must be 1 or 2.  Gets incremented when
             recursing.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oUserNameDictionary">
             The key is the user name and the value is the corresponding GraphML XML
             node that represents the user.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.CreateGraphMLXmlDocument(System.Boolean)">
             <summary>
             Creates a GraphMLXmlDocument representing a network of YouTube users.
             </summary>
            
             <param name="bIncludeAllStatistics">
             true to include each user's statistics.
             </param>
            
             <returns>
             A GraphMLXmlDocument representing a network of YouTube users.  The
             document includes GraphML-attribute definitions but no vertices or
             edges.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WhatToIncludeFlagIsSet(Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WhatToInclude,Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WhatToInclude)">
             <summary>
             Checks whether a flag is set in an ORed combination of WhatToInclude
             flags.
             </summary>
            
             <param name="eORedEnumFlags">
             Zero or more ORed Enum flags.
             </param>
            
             <param name="eORedEnumFlagsToCheck">
             One or more Enum flags to check.
             </param>
            
             <returns>
             true if any of the <paramref name="eORedEnumFlagsToCheck" /> flags are
             set in <paramref name="eORedEnumFlags" />.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.GetNetworkDescription(System.String,Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WhatToInclude,Smrf.SocialNetworkLib.NetworkLevel,System.Int32)">
             <summary>
             Gets a description of the network.
             </summary>
            
             <param name="sUserNameToAnalyze">
             The user name of the YouTube user whose network should be analyzed.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="eNetworkLevel">
             Network level to include.  Must be NetworkLevel.One, OnePointFive, or
             Two.
             </param>
            
             <param name="iMaximumPeoplePerRequest">
             Maximum number of people to request for each query, or Int32.MaxValue
             for no limit.
             </param>
            
             <returns>
             A description of the network.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.GetFriendsOrSubscriptionsUrl(System.String,System.Boolean)">
             <summary>
             Gets the YouTube API URL for a user's friends or subscriptions.
             </summary>
            
             <param name="sUserName">
             The user name.
             </param>
            
             <param name="bFriends">
             true to get the URL for the user's friends, false to get the URL for
             the user's subscriptions.
             </param>
            
             <returns>
             The URL for the user's friends or subscriptions.  Does not include any
             URL parameters.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.ReportProgressForFriendsOrSubscriptions(System.String,System.Boolean)">
             <summary>
             Reports progress before getting a user's friends or subscriptions.
             </summary>
            
             <param name="sUserName">
             The user name.
             </param>
            
             <param name="bFriends">
             true if getting the user's friends, false if getting the user's
             subscriptions.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.TryAppendVertexXmlNode(System.String,System.Xml.XmlNode,Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.Dictionary{System.String,System.Xml.XmlNode})">
             <summary>
             Appends a vertex XML node to the GraphML document for a user if such a
             node doesn't already exist.
             </summary>
            
             <param name="sUserName">
             User name to add a vertex XML node for.
             </param>
            
             <param name="oEntryXmlNode">
             The "entry" XML node returned by YouTube, or null if an entry node
             isn't available.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oUserNameDictionary">
             The key is the user name and the value is the corresponding GraphML XML
             node that represents the user.
             </param>
            
             <returns>
             true if a vertex XML node was added, false if a vertex XML node already
             exists.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.AppendAllStatisticGraphMLAttributeValues(Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.Dictionary{System.String,System.Xml.XmlNode},Smrf.SocialNetworkLib.RequestStatistics)">
             <overloads>
             Appends statistic GraphML attribute values to the GraphML document.
             </overloads>
            
             <summary>
             Appends statistic GraphML attribute values to the GraphML document for
             all users in the network.
             </summary>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oUserNameDictionary">
             The key is the user name and the value is the corresponding GraphML XML
             node that represents the user.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.AppendAllStatisticGraphMLAttributeValues(System.String,System.Xml.XmlNode,Smrf.XmlLib.GraphMLXmlDocument,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Appends statistic GraphML attribute values to the GraphML document for
             one user in the network.
             </summary>
            
             <param name="sUserName">
             The user name.
             </param>
            
             <param name="oVertexXmlNode">
             The GraphML XML node corresponding to the user.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.AppendInt32GraphMLAttributeValue(System.String,System.String,Smrf.XmlLib.GraphMLXmlDocument,Smrf.SocialNetworkLib.RequestStatistics,System.Xml.XmlNode,System.String)">
             <summary>
             Appends an Int32 GraphML-Attribute value from an XmlDocument to a
             vertex XML node. 
             </summary>
            
             <param name="sUrl">
             The URL to get the XmlDocument from.
             </param>
             
             <param name="sXPath">
             Path to the value within the XmlDocument.
             </param>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oVertexXmlNode">
             The vertex XML node from <paramref name="oGraphMLXmlDocument"/> to add
             the GraphML attribute value to.
             </param>
            
             <param name="sGraphMLAttributeID">
             GraphML ID of the attribute.
             </param>
            
             <remarks>
             This method looks for an Int32 value within an XmlDocument returned by
             YouTube and stores the value on a vertex XML node in the GraphML
             document.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Handles the DoWork event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Source of the event.
             </param>
            
             <param name="e">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WhatToInclude">
             <summary>
             Flags that specify what should be included in a network requested from
             this class.
             </summary>
            
             <remarks>
             The flags can be ORed together.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WhatToInclude.None">
            <summary>
            Include nothing.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WhatToInclude.FriendVertices">
            <summary>
            Include a vertex for each of the user's friends.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WhatToInclude.SubscriptionVertices">
            <summary>
            Include a vertex for each person subscribed to by the user.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.WhatToInclude.AllStatistics">
            <summary>
            Include all statistics for each user.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.GetNetworkAsyncArgs">
            <summary>
            Contains the arguments needed to asynchronously get a network of
            YouTube users.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.GetNetworkAsyncArgs.UserNameToAnalyze">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.GetNetworkAsyncArgs.WhatToInclude">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.GetNetworkAsyncArgs.NetworkLevel">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeUserNetworkAnalyzer.GetNetworkAsyncArgs.MaximumPeoplePerRequest">
            
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer">
             <summary>
             Gets a network of related YouTube videos.
             </summary>
            
             <remarks>
             Use <see cref="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.GetNetworkAsync(System.String,Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToInclude,System.Int32)"/> to asynchronously get an undirected
             network of related YouTube videos.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.SharedCategoryID">
            GraphML-attribute IDs for edges.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.SharedCommenterID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.SharedVideoResponderID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.TitleID">
            GraphML-attribute IDs for vertices.
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.AuthorID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.RatingID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.ViewsID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.FavoritedID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.CommentsID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.CreatedDateUtcID">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.MaximumCommentsPerVideo">
            Maximum number of comments to get for each video when
            WhatToInclude.SharedCommenterEdges is specified.
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.GetNetworkAsync(System.String,Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToInclude,System.Int32)">
             <summary>
             Asynchronously gets an undirected network of related YouTube videos.
             </summary>
            
             <param name="searchTerm">
             The term to search for.
             </param>
            
             <param name="whatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="maximumVideos">
             Maximum number of videos to request, or Int32.MaxValue for no limit.
             </param>
            
             <remarks>
             When the analysis completes, the <see cref="E:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.AnalysisCompleted"/> event fires.  The
             <see cref="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result"/> property will return
             an XmlDocument containing the network as GraphML.
            
             <para>
             To cancel the analysis, call <see cref="M:Smrf.NodeXL.GraphDataProviders.HttpNetworkAnalyzerBase.CancelAsync"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.GetVideoNetworkInternal(System.String,Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToInclude,System.Int32)">
             <overloads>
             Gets a network of related YouTube videos.
             </overloads>
            
             <summary>
             Gets a network of related YouTube videos.
             </summary>
            
             <param name="sSearchTerm">
             The term to search for.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="iMaximumVideos">
             Maximum number of videos to request, or Int32.MaxValue for no limit.
             </param>
            
             <returns>
             An XmlDocument containing the network as GraphML.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.GetVideoNetworkInternal(System.String,Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToInclude,System.Int32,Smrf.SocialNetworkLib.RequestStatistics,Smrf.XmlLib.GraphMLXmlDocument)">
             <summary>
             Gets a network of related YouTube videos, given a GraphMLXmlDocument.
             </summary>
            
             <param name="sSearchTerm">
             The term to search for.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="iMaximumVideos">
             Maximum number of videos to request, or Int32.MaxValue for no limit.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument to populate with the requested network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.CreateGraphMLXmlDocument(Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToInclude)">
             <summary>
             Creates a GraphMLXmlDocument representing a network of YouTube videos.
             </summary>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <returns>
             A GraphMLXmlDocument representing a network of YouTube videos.  The
             document includes GraphML-attribute definitions but no vertices or
             edges.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.AppendVertexXmlNodes(System.String,Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToInclude,System.Int32,Smrf.XmlLib.GraphMLXmlDocument,Smrf.SocialNetworkLib.RequestStatistics,System.Collections.Generic.HashSet{System.String}@,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.LinkedList{System.String}}@)">
             <summary>
             Appends a vertex XML node for each video that matches a specified
             search term.
             </summary>
            
             <param name="sSearchTerm">
             The term to search for.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="iMaximumVideos">
             Maximum number of videos to request, or Int32.MaxValue for no limit.
             </param>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument being populated.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <param name="oVideoIDs">
             Where the set of unique video IDs gets stored.
             </param>
            
             <param name="oCategoryDictionary">
             If an edge should be included for each pair of videos that share the
             same category, this gets set to a Dictionary for which the key is a
             lower-case category and the value is a LinkedList of the video IDs that
             have the category.  Otherwise, it gets set to null.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.AppendSharedResponderEdges(Smrf.XmlLib.GraphMLXmlDocument,System.Collections.Generic.HashSet{System.String},System.Int32,System.String,System.String,System.String,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Appends an edge XML node for each pair of videos for which the same
             person responded.
             </summary>
            
             <param name="oGraphMLXmlDocument">
             The GraphMLXmlDocument being populated.
             </param>
            
             <param name="oVideoIDs">
             The set of unique video IDs.
             </param>
            
             <param name="iMaximumResponses">
             Maximum number of responses to request, or Int32.MaxValue for no limit.
             </param>
            
             <param name="sUrlPattern">
             URL to get the responses for one video, with "{0}" where the video ID
             goes.
             </param>
            
             <param name="sResponderTitle">
             Title describing the person who has responded.  Samples: "commenter",
             "video responder".
             </param>
            
             <param name="sKeyAttributeID">
             The GraphML-attribute ID to use for the dictionary key's value.
             </param>
            
             <param name="oRequestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.CollectCategories(System.Xml.XmlNode,System.String,System.Xml.XmlNamespaceManager,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.LinkedList{System.String}})">
             <summary>
             Collects categories for a YouTube video.
             </summary>
            
             <param name="oEntryXmlNode">
             Entry XML node from YouTube that describes a video.
             </param>
            
             <param name="sVideoID">
             YouTube ID for the video.
             </param>
            
             <param name="oXmlNamespaceManager">
             NamespaceManager to use, or null to not use one.
             </param>
            
             <param name="oCategoryDictionary">
             The key is a lower-case category and the value is a LinkedList of the
             video IDs that have the category.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.AddVideoIDToDictionary(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.LinkedList{System.String}})">
             <summary>
             Adds a video ID to a dictionary.
             </summary>
            
             <param name="oDictionary">
             The key is a string and the value is a LinkedList of the video IDs
             corresponding to that string.
             </param>
            
             <param name="sKey">
             The dictionary key the video belongs to.
             </param>
            
             <param name="sVideoID">
             YouTube ID for the video.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.AppendEdgesFromDictionary(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.LinkedList{System.String}},Smrf.XmlLib.GraphMLXmlDocument,System.String,System.String)">
             <summary>
             Appends an edge for each pair of videos that share the same dictionary
             key.
             </summary>
            
             <param name="oGraphMLXmlDocument">
             GraphMLXmlDocument being populated.
             </param>
            
             <param name="oDictionary">
             The key is a string and the value is a LinkedList of the video IDs
             corresponding to that key.
             </param>
            
             <param name="sRelationship">
             The value of the RelationshipID GraphML-attribute to use.
             </param>
            
             <param name="sKeyAttributeID">
             The GraphML-attribute ID to use for the dictionary key's value.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToIncludeFlagIsSet(Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToInclude,Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToInclude)">
             <summary>
             Checks whether a flag is set in an ORed combination of WhatToInclude
             flags.
             </summary>
            
             <param name="eORedEnumFlags">
             Zero or more ORed Enum flags.
             </param>
            
             <param name="eORedEnumFlagsToCheck">
             One or more Enum flags to check.
             </param>
            
             <returns>
             true if any of the <paramref name="eORedEnumFlagsToCheck" /> flags are
             set in <paramref name="eORedEnumFlags" />.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.GetNetworkDescription(System.String,Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToInclude,System.Int32)">
             <summary>
             Gets a description of the network.
             </summary>
            
             <param name="sSearchTerm">
             The term to search for.
             </param>
            
             <param name="eWhatToInclude">
             Specifies what should be included in the network.
             </param>
            
             <param name="iMaximumVideos">
             Maximum number of videos to request, or Int32.MaxValue for no limit.
             </param>
            
             <returns>
             A description of the network.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Handles the DoWork event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Source of the event.
             </param>
            
             <param name="e">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToInclude">
             <summary>
             Flags that specify what should be included in a network requested from
             this class.
             </summary>
            
             <remarks>
             The flags can be ORed together.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToInclude.None">
            <summary>
            Include nothing.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToInclude.SharedCommenterEdges">
            <summary>
            Include an edge for each pair of videos commented on by the same
            person.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToInclude.SharedCategoryEdges">
            <summary>
            Include an edge for each pair of videos that share the same
            category.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.WhatToInclude.SharedVideoResponderEdges">
            <summary>
            Include an edge for each pair of videos for which the same person
            responded with a video.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.GetNetworkAsyncArgs">
            <summary>
            Contains the arguments needed to asynchronously get a network of
            related YouTube videos.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.GetNetworkAsyncArgs.SearchTerm">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.GetNetworkAsyncArgs.WhatToInclude">
            
        </member>
        <member name="F:Smrf.NodeXL.GraphDataProviders.YouTube.YouTubeVideoNetworkAnalyzer.GetNetworkAsyncArgs.MaximumVideos">
            
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.NetworkDescriber">
            <summary>
            Version of <see cref="T:Smrf.AppLib.SentenceConcatenator"/> specialized with additional
            methods for describing a network.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.NetworkDescriber.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.GraphDataProviders.NetworkDescriber"/>
            class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.NetworkDescriber.AddNetworkTime(System.String)">
             <summary>
             Adds a sentence to the network description that says when the network
             was obtained.
             </summary>
            
             <param name="networkSource">
             Where the network came from.  Sample: "Twitter".
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.NetworkDescriber.AddEventTime(System.String,System.DateTime)">
             <summary>
             Adds a sentence to the network description that says when an event
             occurred.
             </summary>
            
             <param name="prefix">
             Description of the event.  Sample: "The network was obtained from
             Twitter".
             </param>
            
             <param name="dateTimeUtc">
             Time the event occurred, in UTC.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.NetworkDescriber.FormatEventTime(System.DateTime)">
             <summary>
             Formats the time that an event occurred.
             </summary>
            
             <param name="dateTimeUtc">
             Time the event occurred, in UTC.
             </param>
            
             <returns>
             Sample: "Monday, 05 March 2012 at 22:13 UTC"
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.NetworkDescriber.FormatDuration(System.DateTime,System.DateTime)">
             <summary>
             Formats the duration of a period of time.
             </summary>
            
             <param name="startOfPeriodUtc">
             Start time of the period, in UTC.
             </param>
            
             <param name="endOfPeriodUtc">
             End time of the period, in UTC.
             </param>
            
             <returns>
             Sample: "2-day, 23-hour, 4-minute".
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.NetworkDescriber.AddNetworkLimit(System.Int32,System.String)">
             <summary>
             Adds a sentence to the network description that says how the network
             was limited, if it was limited.
             </summary>
            
             <param name="maximumObjects">
             Maximum number of objects in the network, or Int32.MaxValue for no
             limit.
             </param>
            
             <param name="objectDescriptionPlural">
             Plural form of a description of the objects in the network.  Sample:
             "people".
             </param>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.NetworkDescriber.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.GraphDataProviders.SnaTitleCreator">
            <summary>
            Creates a title for Social Network Analysis graphs.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.GraphDataProviders.SnaTitleCreator.CreateSnaTitle(System.String,Smrf.SocialNetworkLib.RequestStatistics)">
             <summary>
             Creates a title for SNA graphs.
             </summary>
            
             <param name="searchTerm">
             The search term that was used.
             </param>
            
             <param name="requestStatistics">
             A <see cref="T:Smrf.SocialNetworkLib.RequestStatistics"/> object that is keeping track of
             requests made while getting the network.
             </param>
            
             <returns>
             A title.
             </returns>
        </member>
    </members>
</doc>
